@font-face {
  font-family: 'Roboto Light';
  src: url("../fonts/Roboto-Light.ttf") format('truetype');
}
@font-face {
  font-family: 'Roboto Medium';
  src: url("../fonts/Roboto-Medium.ttf") format('truetype');
}
@font-face {
  font-family: 'Roboto Bold';
  src: url("../fonts/Roboto-Bold.ttf") format('truetype');
}
@font-face {
  font-family: 'Roboto Black';
  src: url("../fonts/Roboto-Black.ttf") format('truetype');
}
* {
  margin: 0;
  padding: 0;
  font: inherit;
  box-sizing: border-box;
}
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}
audio,
canvas,
progress,
video {
  display: inline-block;
  vertical-align: baseline;
}
audio:not([controls]) {
  display: none;
  height: 0;
}
[hidden],
template {
  display: none;
}
html {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  -webkit-tap-highlight-color: rgba(0,0,0,0);
  -webkit-focus-ring-color: rgba(255,255,255,0);
  cursor: default;
}
body {
  font-size: 100%;
  line-height: 1;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}
a {
  background: transparent;
}
*:focus,
*:active,
*:hover {
  outline: 0;
}
hr {
  box-sizing: content-box;
  height: 0;
}
ol,
ul {
  list-style: none;
}
pre {
  -moz-tab-size: 4;
       tab-size: 4;
  white-space: pre-wrap;
}
q {
  quotes: '\201C' '\201D' '\2018' '\2019';
}
img {
  border: 0;
}
svg:not(:root) {
  overflow: hidden;
}
button,
input {
  line-height: normal;
}
button,
select {
  text-transform: none;
}
button {
  overflow: visible;
}
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  cursor: pointer;
}
button[disabled],
html input[disabled] {
  cursor: default;
}
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
}
input[type="number"]::-webkit-inner-spin-button,
input[type="number"]::-webkit-outer-spin-button {
  height: auto;
}
input[type="search"] {
  -webkit-appearance: textfield;
  box-sizing: content-box;
}
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}
textarea {
  overflow: auto;
  vertical-align: top;
}
button,
input,
select[multiple],
textarea {
  background-image: none;
}
input,
select,
textarea {
  border-radius: 0;
  box-shadow: none;
}
input,
textarea {
  resize: none;
  -webkit-user-select: text;
     -moz-user-select: text;
      -ms-user-select: text;
          user-select: text;
}
[placeholder]:focus::-webkit-input-placeholder {
  color: transparent;
}
[placeholder]:focus::-moz-placeholder {
  color: transparent;
}
[placeholder]:focus:-ms-input-placeholder {
  color: transparent;
}
[placeholder]:focus::placeholder {
  color: transparent;
}
table {
  border-collapse: collapse;
  border-spacing: 0;
}
.fork::-moz-selection {
  background-color: transparent;
}
.fork::selection {
  background-color: transparent;
}
@media only screen and (min-width: 541px) {
  .fork {
    position: absolute;
    top: 0;
    right: 0;
    display: block;
    height: 200px;
    width: 200px;
    overflow: hidden;
  }
}
.fork__link {
  display: block;
  padding: 5px 40px;
  font: bold 1rem/2rem arial, sans-serif;
  font-weight: bold;
  text-align: center;
  text-decoration: none;
  -webkit-transition: background 0.25s ease-out, color 0.25s ease-out;
          transition: background 0.25s ease-out, color 0.25s ease-out;
}
@media only screen and (max-width: 540px) {
  .fork__link {
    margin-top: 40px;
    color: #e74c3c;
    border-radius: 4px;
  }
  .fork__link:active {
    -webkit-transform: scale(0.975);
            transform: scale(0.975);
  }
}
@media only screen and (min-width: 541px) {
  .fork__link {
    position: absolute;
    top: 50px;
    right: -54px;
    width: 250px;
    color: #fff;
    background-color: #222;
    background-image: url("../images/vertical-cloth.png");
    box-shadow: 0 0 8px rgba(0,0,0,0.5);
    -webkit-transform: rotate(45deg);
            transform: rotate(45deg);
  }
  .fork__link:before,
  .fork__link:after {
    position: absolute;
    top: 1px;
    left: 0;
    display: block;
    width: 100%;
    height: 1px;
    background-color: #fff;
    content: '';
  }
  .fork__link:after {
    top: auto;
    bottom: 1px;
  }
}
.fork__link:hover {
  color: #fff;
  background-color: #e74c3c;
  background-image: none;
}
.tab {
  min-width: 960px;
  height: 100vh;
}
.tab:nth-child(2) {
  background: #000;
}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC9zdHlsZXMvYmFzZS9mb250cy5zdHlsIiwiMTQzMzg1MzAzNDE1ODEiLCJhcHAvc3R5bGVzL2Jhc2Uvb3B0aW1pemUuc3R5bCIsImFwcC9zdHlsZXMvYmxvY2tzL2Zvcmsuc3R5bCIsIm5vZGVfbW9kdWxlcy9ydXB0dXJlL3J1cHR1cmUvaW5kZXguc3R5bCIsImFwcC9zdHlsZXMvYmxvY2tzL3RhYnMuc3R5bCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQTtFQUNFLDZCQUFBO0VBQ0EsMERBQUE7RUNKRDtBRE1EO0VBQ0UsOEJBQUE7RUFDQSwyREFBQTtFQ0pEO0FETUQ7RUFDRSw0QkFBQTtFQUNBLHlEQUFBO0VDSkQ7QURNRDtFQUNFLDZCQUFBO0VBQ0EsMERBQUE7RUNKRDtBQ1hEO0VBQ0MsV0FBQTtFQUNBLFlBQUE7RUFDQSxlQUFBO0VBQ0Esd0JBQUE7RURhQTtBQ1BEOzs7Ozs7Ozs7Ozs7RUFZQyxnQkFBQTtFRFNBO0FDTEQ7Ozs7RUFJQyx1QkFBQTtFQUNBLDBCQUFBO0VET0E7QUNIRDtFQUNDLGVBQUE7RUFDQSxXQUFBO0VES0E7QUNERDs7RUFFQyxlQUFBO0VER0E7QUNNRDtFQUNDLHlCQUFBO0VBQ0EsNEJBQUE7RUFDQSxnQ0FBQTtFQUNBLDRDQUFBO0VBQ0EsK0NBQUE7RUFDQSxpQkFBQTtFREpBO0FDT0Q7RUFDQyxpQkFBQTtFQUNBLGdCQUFBO0VBQ0Esb0NBQUE7RUFDQSxxQ0FBQTtFRExBO0FDV0Q7RUFDQyx5QkFBQTtFRFRBO0FDWUQ7OztFQUdDLFlBQUE7RURWQTtBQ2dCRDtFQUNDLHlCQUFBO0VBQ0EsV0FBQTtFRGRBO0FDaUJEOztFQUVDLGtCQUFBO0VEZkE7QUNrQkQ7RUFDQyxrQkFBQTtPQUFBLGFBQUE7RUFDQSx1QkFBQTtFRGhCQTtBQ21CRDtFQUNDLHlDQUFBO0VEakJBO0FDdUJEO0VBQ0MsV0FBQTtFRHJCQTtBQ3dCRDtFQUNDLGtCQUFBO0VEdEJBO0FDNEJEOztFQUVDLHFCQUFBO0VEMUJBO0FDZ0NEOztFQUVDLHNCQUFBO0VEOUJBO0FDaUNEO0VBQ0MsbUJBQUE7RUQvQkE7QUNvQ0Q7Ozs7RUFJQyw0QkFBQTtFQUNBLGlCQUFBO0VEbENBO0FDcUNEOztFQUVDLGlCQUFBO0VEbkNBO0FDc0NEOztFQUVDLHdCQUFBO0VEcENBO0FDeUNEOztFQUVDLGNBQUE7RUR2Q0E7QUMyQ0Q7RUFDQywrQkFBQTtFQUNBLHlCQUFBO0VEekNBO0FDNENEOztFQUVDLDBCQUFBO0VEMUNBO0FDNkNEOztFQUVDLFdBQUE7RUFDQSxZQUFBO0VEM0NBO0FDK0NEO0VBQ0MsZ0JBQUE7RUFDQSxxQkFBQTtFRDdDQTtBQ2dERDs7OztFQUlDLHdCQUFBO0VEOUNBO0FDa0REOzs7RUFHQyxrQkFBQTtFQUNBLGtCQUFBO0VEaERBO0FDb0REOztFQUVDLGNBQUE7RUFDQSwyQkFBQTtLQUFBLHdCQUFBO01BQUEsdUJBQUE7VUFBQSxtQkFBQTtFRGxEQTtBQ3FERDtFQUNDLG9CQUFBO0VEbkRBO0FDa0REO0VBQ0Msb0JBQUE7RURuREE7QUNrREQ7RUFDQyxvQkFBQTtFRG5EQTtBQ2tERDtFQUNDLG9CQUFBO0VEbkRBO0FDeUREO0VBQ0MsMkJBQUE7RUFDQSxtQkFBQTtFRHZEQTtBRW5LQTtFQUNDLCtCQUFBO0VGcUtEO0FFdEtBO0VBQ0MsK0JBQUE7RUZxS0Q7QUd4QlU7RUFBQTtJRDFJVCxvQkFBQTtJQUNBLFFBQUE7SUFDQSxVQUFBO0lBQ0EsZ0JBQUE7SUFDQSxlQUFBO0lBQ0EsY0FBQTtJQUNBLGtCQUFBO0lGc0tDO0VBQ0Y7QUVyS0E7RUFDQyxnQkFBQTtFQUNBLG1CQUFBO0VBQ0Esd0NBQUE7RUFDQSxtQkFBQTtFQUNBLG9CQUFBO0VBQ0EsdUJBQUE7RUFDQSxxRUFBQTtVQUFBLDZEQUFBO0VGdUtEO0FHNUNVO0VBQUE7SUR4SFIsa0JBQUE7SUFDQSxnQkFBQTtJQUNBLG9CQUFBO0lGd0tBO0VFdEtBO0lBQ0MsaUNBQUE7WUFBQSx5QkFBQTtJRndLRDtFQUNGO0FHdERVO0VBQUE7SURoSFIsb0JBQUE7SUFDQSxXQUFBO0lBQ0EsY0FBQTtJQUNBLGNBQUE7SUFDQSxhQUFBO0lBQ0Esd0JBQUE7SUFDQSx1REFBQTtJQUNBLHFDQUFBO0lBQ0Esa0NBQUE7WUFBQSwwQkFBQTtJRjBLQTtFRXhLQTs7SUFFQyxvQkFBQTtJQUNBLFVBQUE7SUFDQSxTQUFBO0lBQ0EsZ0JBQUE7SUFDQSxhQUFBO0lBQ0EsYUFBQTtJQUNBLHdCQUFBO0lBQ0EsYUFBQTtJRjBLRDtFRXhLQTtJQUNDLFdBQUE7SUFDQSxhQUFBO0lGMEtEO0VBQ0Y7QUV6S0M7RUFDQyxhQUFBO0VBQ0EsMkJBQUE7RUFDQSx3QkFBQTtFRjJLRjtBSXRPRDtFQUNDLGtCQUFBO0VBQ0EsZUFBQTtFSndPQTtBSXZPQTtFQUNDLGtCQUFBO0VKeU9EIiwiZmlsZSI6InRvLmNzcyIsInNvdXJjZXNDb250ZW50IjpbIm1idC1yYi1sID0gJ1JvYm90byBMaWdodCcsIHNhbnMtc2VyaWZcbm1idC1yYi1tID0gJ1JvYm90byBNZWRpdW0nLCBzYW5zLXNlcmlmXG5tYnQtcmItYiA9ICdSb2JvdG8gQm9sZCcsIHNhbnMtc2VyaWZcbm1idC1yYi1ibCA9ICdSb2JvdG8gQmxhY2snLCBzYW5zLXNlcmlmXG5cbkBmb250LWZhY2VcbiAgZm9udC1mYW1pbHkgJ1JvYm90byBMaWdodCdcbiAgc3JjIHVybCgnLi4vZm9udHMvUm9ib3RvLUxpZ2h0LnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKVxuXG5AZm9udC1mYWNlXG4gIGZvbnQtZmFtaWx5ICdSb2JvdG8gTWVkaXVtJ1xuICBzcmMgdXJsKCcuLi9mb250cy9Sb2JvdG8tTWVkaXVtLnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKVxuXG5AZm9udC1mYWNlXG4gIGZvbnQtZmFtaWx5ICdSb2JvdG8gQm9sZCdcbiAgc3JjIHVybCgnLi4vZm9udHMvUm9ib3RvLUJvbGQudHRmJykgZm9ybWF0KCd0cnVldHlwZScpXG5cbkBmb250LWZhY2VcbiAgZm9udC1mYW1pbHkgJ1JvYm90byBCbGFjaydcbiAgc3JjIHVybCgnLi4vZm9udHMvUm9ib3RvLUJsYWNrLnR0ZicpIGZvcm1hdCgndHJ1ZXR5cGUnKVxuIiwiQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvIExpZ2h0JztcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9Sb2JvdG8tTGlnaHQudHRmXCIpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ1JvYm90byBNZWRpdW0nO1xuICBzcmM6IHVybChcIi4uL2ZvbnRzL1JvYm90by1NZWRpdW0udHRmXCIpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcbn1cbkBmb250LWZhY2Uge1xuICBmb250LWZhbWlseTogJ1JvYm90byBCb2xkJztcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9Sb2JvdG8tQm9sZC50dGZcIikgZm9ybWF0KCd0cnVldHlwZScpO1xufVxuQGZvbnQtZmFjZSB7XG4gIGZvbnQtZmFtaWx5OiAnUm9ib3RvIEJsYWNrJztcbiAgc3JjOiB1cmwoXCIuLi9mb250cy9Sb2JvdG8tQmxhY2sudHRmXCIpIGZvcm1hdCgndHJ1ZXR5cGUnKTtcbn1cbioge1xuICBtYXJnaW46IDA7XG4gIHBhZGRpbmc6IDA7XG4gIGZvbnQ6IGluaGVyaXQ7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG59XG5hcnRpY2xlLFxuYXNpZGUsXG5kZXRhaWxzLFxuZmlnY2FwdGlvbixcbmZpZ3VyZSxcbmZvb3RlcixcbmhlYWRlcixcbmhncm91cCxcbm1haW4sXG5uYXYsXG5zZWN0aW9uLFxuc3VtbWFyeSB7XG4gIGRpc3BsYXk6IGJsb2NrO1xufVxuYXVkaW8sXG5jYW52YXMsXG5wcm9ncmVzcyxcbnZpZGVvIHtcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICB2ZXJ0aWNhbC1hbGlnbjogYmFzZWxpbmU7XG59XG5hdWRpbzpub3QoW2NvbnRyb2xzXSkge1xuICBkaXNwbGF5OiBub25lO1xuICBoZWlnaHQ6IDA7XG59XG5baGlkZGVuXSxcbnRlbXBsYXRlIHtcbiAgZGlzcGxheTogbm9uZTtcbn1cbmh0bWwge1xuICBmb250LWZhbWlseTogc2Fucy1zZXJpZjtcbiAgLW1zLXRleHQtc2l6ZS1hZGp1c3Q6IDEwMCU7XG4gIC13ZWJraXQtdGV4dC1zaXplLWFkanVzdDogMTAwJTtcbiAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsMCwwLDApO1xuICAtd2Via2l0LWZvY3VzLXJpbmctY29sb3I6IHJnYmEoMjU1LDI1NSwyNTUsMCk7XG4gIGN1cnNvcjogZGVmYXVsdDtcbn1cbmJvZHkge1xuICBmb250LXNpemU6IDEwMCU7XG4gIGxpbmUtaGVpZ2h0OiAxO1xuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcbn1cbmEge1xuICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcbn1cbio6Zm9jdXMsXG4qOmFjdGl2ZSxcbio6aG92ZXIge1xuICBvdXRsaW5lOiAwO1xufVxuaHIge1xuICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgaGVpZ2h0OiAwO1xufVxub2wsXG51bCB7XG4gIGxpc3Qtc3R5bGU6IG5vbmU7XG59XG5wcmUge1xuICB0YWItc2l6ZTogNDtcbiAgd2hpdGUtc3BhY2U6IHByZS13cmFwO1xufVxucSB7XG4gIHF1b3RlczogJ1xcMjAxQycgJ1xcMjAxRCcgJ1xcMjAxOCcgJ1xcMjAxOSc7XG59XG5pbWcge1xuICBib3JkZXI6IDA7XG59XG5zdmc6bm90KDpyb290KSB7XG4gIG92ZXJmbG93OiBoaWRkZW47XG59XG5idXR0b24sXG5pbnB1dCB7XG4gIGxpbmUtaGVpZ2h0OiBub3JtYWw7XG59XG5idXR0b24sXG5zZWxlY3Qge1xuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcbn1cbmJ1dHRvbiB7XG4gIG92ZXJmbG93OiB2aXNpYmxlO1xufVxuYnV0dG9uLFxuaHRtbCBpbnB1dFt0eXBlPVwiYnV0dG9uXCJdLFxuaW5wdXRbdHlwZT1cInJlc2V0XCJdLFxuaW5wdXRbdHlwZT1cInN1Ym1pdFwiXSB7XG4gIC13ZWJraXQtYXBwZWFyYW5jZTogYnV0dG9uO1xuICBjdXJzb3I6IHBvaW50ZXI7XG59XG5idXR0b25bZGlzYWJsZWRdLFxuaHRtbCBpbnB1dFtkaXNhYmxlZF0ge1xuICBjdXJzb3I6IGRlZmF1bHQ7XG59XG5pbnB1dFt0eXBlPVwiY2hlY2tib3hcIl0sXG5pbnB1dFt0eXBlPVwicmFkaW9cIl0ge1xuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xufVxuaW5wdXRbdHlwZT1cIm51bWJlclwiXTo6LXdlYmtpdC1pbm5lci1zcGluLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b24ge1xuICBoZWlnaHQ6IGF1dG87XG59XG5pbnB1dFt0eXBlPVwic2VhcmNoXCJdIHtcbiAgLXdlYmtpdC1hcHBlYXJhbmNlOiB0ZXh0ZmllbGQ7XG4gIGJveC1zaXppbmc6IGNvbnRlbnQtYm94O1xufVxuaW5wdXRbdHlwZT1cInNlYXJjaFwiXTo6LXdlYmtpdC1zZWFyY2gtY2FuY2VsLWJ1dHRvbixcbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb24ge1xuICAtd2Via2l0LWFwcGVhcmFuY2U6IG5vbmU7XG59XG5idXR0b246Oi1tb3otZm9jdXMtaW5uZXIsXG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lciB7XG4gIGJvcmRlcjogMDtcbiAgcGFkZGluZzogMDtcbn1cbnRleHRhcmVhIHtcbiAgb3ZlcmZsb3c6IGF1dG87XG4gIHZlcnRpY2FsLWFsaWduOiB0b3A7XG59XG5idXR0b24sXG5pbnB1dCxcbnNlbGVjdFttdWx0aXBsZV0sXG50ZXh0YXJlYSB7XG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XG59XG5pbnB1dCxcbnNlbGVjdCxcbnRleHRhcmVhIHtcbiAgYm9yZGVyLXJhZGl1czogMDtcbiAgYm94LXNoYWRvdzogbm9uZTtcbn1cbmlucHV0LFxudGV4dGFyZWEge1xuICByZXNpemU6IG5vbmU7XG4gIHVzZXItc2VsZWN0OiB0ZXh0O1xufVxuW3BsYWNlaG9sZGVyXTpmb2N1czo6cGxhY2Vob2xkZXIge1xuICBjb2xvcjogdHJhbnNwYXJlbnQ7XG59XG50YWJsZSB7XG4gIGJvcmRlci1jb2xsYXBzZTogY29sbGFwc2U7XG4gIGJvcmRlci1zcGFjaW5nOiAwO1xufVxuLmZvcms6OnNlbGVjdGlvbiB7XG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xufVxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiA1NDFweCkge1xuICAuZm9yayB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICByaWdodDogMDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICBoZWlnaHQ6IDIwMHB4O1xuICAgIHdpZHRoOiAyMDBweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICB9XG59XG4uZm9ya19fbGluayB7XG4gIGRpc3BsYXk6IGJsb2NrO1xuICBwYWRkaW5nOiA1cHggNDBweDtcbiAgZm9udDogYm9sZCAxcmVtLzJyZW0gYXJpYWwsIHNhbnMtc2VyaWY7XG4gIGZvbnQtd2VpZ2h0OiBib2xkO1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgdHJhbnNpdGlvbjogYmFja2dyb3VuZCAwLjI1cyBlYXNlLW91dCwgY29sb3IgMC4yNXMgZWFzZS1vdXQ7XG59XG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDU0MHB4KSB7XG4gIC5mb3JrX19saW5rIHtcbiAgICBtYXJnaW4tdG9wOiA0MHB4O1xuICAgIGNvbG9yOiAjZTc0YzNjO1xuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcbiAgfVxuICAuZm9ya19fbGluazphY3RpdmUge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMC45NzUpO1xuICB9XG59XG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDU0MXB4KSB7XG4gIC5mb3JrX19saW5rIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiA1MHB4O1xuICAgIHJpZ2h0OiAtNTRweDtcbiAgICB3aWR0aDogMjUwcHg7XG4gICAgY29sb3I6ICNmZmY7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzIyMjtcbiAgICBiYWNrZ3JvdW5kLWltYWdlOiB1cmwoXCIuLi9pbWFnZXMvdmVydGljYWwtY2xvdGgucG5nXCIpO1xuICAgIGJveC1zaGFkb3c6IDAgMCA4cHggcmdiYSgwLDAsMCwwLjUpO1xuICAgIHRyYW5zZm9ybTogcm90YXRlKDQ1ZGVnKTtcbiAgfVxuICAuZm9ya19fbGluazpiZWZvcmUsXG4gIC5mb3JrX19saW5rOmFmdGVyIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgdG9wOiAxcHg7XG4gICAgbGVmdDogMDtcbiAgICBkaXNwbGF5OiBibG9jaztcbiAgICB3aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZmO1xuICAgIGNvbnRlbnQ6ICcnO1xuICB9XG4gIC5mb3JrX19saW5rOmFmdGVyIHtcbiAgICB0b3A6IGF1dG87XG4gICAgYm90dG9tOiAxcHg7XG4gIH1cbn1cbi5mb3JrX19saW5rOmhvdmVyIHtcbiAgY29sb3I6ICNmZmY7XG4gIGJhY2tncm91bmQtY29sb3I6ICNlNzRjM2M7XG4gIGJhY2tncm91bmQtaW1hZ2U6IG5vbmU7XG59XG4udGFiIHtcbiAgbWluLXdpZHRoOiA5NjBweDtcbiAgaGVpZ2h0OiAxMDB2aDtcbn1cbi50YWI6bnRoLWNoaWxkKDIpIHtcbiAgYmFja2dyb3VuZDogIzAwMDtcbn1cbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ3Y0M5emRIbHNaWE12WW1GelpTOW1iMjUwY3k1emRIbHNJaXdpWVhCd0wzTjBlV3hsY3k5aVlYTmxMMjl3ZEdsdGFYcGxMbk4wZVd3aUxDSmhjSEF2YzNSNWJHVnpMMkpzYjJOcmN5OW1iM0pyTG5OMGVXd2lMQ0p1YjJSbFgyMXZaSFZzWlhNdmNuVndkSFZ5WlM5eWRYQjBkWEpsTDJsdVpHVjRMbk4wZVd3aUxDSmhjSEF2YzNSNWJHVnpMMkpzYjJOcmN5OTBZV0p6TG5OMGVXd2lYU3dpYm1GdFpYTWlPbHRkTENKdFlYQndhVzVuY3lJNklrRkJTMEU3UlVGRFJTeGhRVUZaTEdWQlFWbzdSVUZEUVN4TFFVRnRReXh2UkVGQmJrTTdPMEZCUlVZN1JVRkRSU3hoUVVGWkxHZENRVUZhTzBWQlEwRXNTMEZCYjBNc2NVUkJRWEJET3p0QlFVVkdPMFZCUTBVc1lVRkJXU3hqUVVGYU8wVkJRMEVzUzBGQmEwTXNiVVJCUVd4RE96dEJRVVZHTzBWQlEwVXNZVUZCV1N4bFFVRmFPMFZCUTBFc1MwRkJiVU1zYjBSQlFXNURPenRCUTJaR08wVkJRME1zVVVGQlR5eEZRVUZRTzBWQlEwRXNVMEZCVVN4RlFVRlNPMFZCUTBFc1RVRkJTeXhSUVVGTU8wVkJRMEVzV1VGQlZ5eFhRVUZZT3p0QlFVMUVPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORExGTkJRVkVzVFVGQlVqczdRVUZKUkR0QlFVTkJPMEZCUTBFN1FVRkRRVHRGUVVORExGTkJRVkVzWVVGQlVqdEZRVU5CTEdkQ1FVRmxMRk5CUVdZN08wRkJTVVE3UlVGRFF5eFRRVUZSTEV0QlFWSTdSVUZEUVN4UlFVRlBMRVZCUVZBN08wRkJTVVE3UVVGRFFUdEZRVU5ETEZOQlFWRXNTMEZCVWpzN1FVRlRSRHRGUVVORExHRkJRVmtzVjBGQldqdEZRVU5CTEhOQ1FVRnhRaXhMUVVGeVFqdEZRVU5CTERCQ1FVRjVRaXhMUVVGNlFqdEZRVU5CTERaQ1FVRXlReXhqUVVFelF6dEZRVU5CTERCQ1FVRTRReXh2UWtGQk9VTTdSVUZEUVN4UlFVRlBMRkZCUVZBN08wRkJSMFE3UlVGRFF5eFhRVUZWTEV0QlFWWTdSVUZEUVN4aFFVRlpMRVZCUVZvN1JVRkRRU3g1UWtGQmQwSXNWVUZCZUVJN1JVRkRRU3gzUWtGQmRVSXNXVUZCZGtJN08wRkJUVVE3UlVGRFF5eFpRVUZYTEZsQlFWZzdPMEZCUjBRN1FVRkRRVHRCUVVOQk8wVkJRME1zVTBGQlVTeEZRVUZTT3p0QlFVMUVPMFZCUTBNc1dVRkJWeXhaUVVGWU8wVkJRMEVzVVVGQlR5eEZRVUZRT3p0QlFVZEVPMEZCUTBFN1JVRkRReXhaUVVGWExFdEJRVmc3TzBGQlIwUTdSVUZEUXl4VlFVRlRMRVZCUVZRN1JVRkRRU3hoUVVGWkxGTkJRVm83TzBGQlIwUTdSVUZEUXl4UlFVRlBMR2REUVVGUU96dEJRVTFFTzBWQlEwTXNVVUZCVHl4RlFVRlFPenRCUVVkRU8wVkJRME1zVlVGQlV5eFBRVUZVT3p0QlFVMUVPMEZCUTBFN1JVRkRReXhoUVVGWkxFOUJRVm83TzBGQlRVUTdRVUZEUVR0RlFVTkRMR2RDUVVGbExFdEJRV1k3TzBGQlIwUTdSVUZEUXl4VlFVRlRMRkZCUVZRN08wRkJTMFE3UVVGRFFUdEJRVU5CTzBGQlEwRTdSVUZEUXl4dlFrRkJiVUlzVDBGQmJrSTdSVUZEUVN4UlFVRlBMRkZCUVZBN08wRkJSMFE3UVVGRFFUdEZRVU5ETEZGQlFVOHNVVUZCVURzN1FVRkhSRHRCUVVOQk8wVkJRME1zV1VGQlZ5eFhRVUZZT3p0QlFVdEVPMEZCUTBFN1JVRkRReXhSUVVGUExFdEJRVkE3TzBGQlNVUTdSVUZEUXl4dlFrRkJiVUlzVlVGQmJrSTdSVUZEUVN4WlFVRlhMRmxCUVZnN08wRkJSMFE3UVVGRFFUdEZRVU5ETEc5Q1FVRnRRaXhMUVVGdVFqczdRVUZIUkR0QlFVTkJPMFZCUTBNc1VVRkJUeXhGUVVGUU8wVkJRMEVzVTBGQlVTeEZRVUZTT3p0QlFVbEVPMFZCUTBNc1ZVRkJVeXhMUVVGVU8wVkJRMEVzWjBKQlFXVXNTVUZCWmpzN1FVRkhSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEZRVU5ETEd0Q1FVRnBRaXhMUVVGcVFqczdRVUZKUkR0QlFVTkJPMEZCUTBFN1JVRkRReXhsUVVGakxFVkJRV1E3UlVGRFFTeFpRVUZYTEV0QlFWZzdPMEZCU1VRN1FVRkRRVHRGUVVORExGRkJRVThzUzBGQlVEdEZRVU5CTEdGQlFWa3NTMEZCV2pzN1FVRkhSRHRGUVVORExFOUJRVTBzV1VGQlRqczdRVUZOUkR0RlFVTkRMR2xDUVVGblFpeFRRVUZvUWp0RlFVTkJMR2RDUVVGbExFVkJRV1k3TzBGRE1VNUJPMFZCUTBNc2EwSkJRV2xDTEZsQlFXcENPenRCUXpaSlV6dEJRVUZCTzBsRU1VbFVMRlZCUVZNc1UwRkJWRHRKUVVOQkxFdEJRVWtzUlVGQlNqdEpRVU5CTEU5QlFVMHNSVUZCVGp0SlFVTkJMRk5CUVZFc1RVRkJVanRKUVVOQkxGRkJRVThzVFVGQlVEdEpRVU5CTEU5QlFVMHNUVUZCVGp0SlFVTkJMRlZCUVZNc1QwRkJWRHM3TzBGQlJVUTdSVUZEUXl4VFFVRlJMRTFCUVZJN1JVRkRRU3hUUVVGUkxGTkJRVkk3UlVGRFFTeE5RVUY1UWl4cFEwRkJla0k3UlVGRFFTeGhRVUZaTEV0QlFWbzdSVUZEUVN4WlFVRlhMRTlCUVZnN1JVRkRRU3hwUWtGQlowSXNTMEZCYUVJN1JVRkRRU3haUVVGdFF5eG5SRUZCYmtNN08wRkRNa2hUTzBGQlFVRTdTVVI0U0ZJc1dVRkJWeXhMUVVGWU8wbEJRMEVzVDBGQlRTeFJRVUZPTzBsQlEwRXNaVUZCWXl4SlFVRmtPenRCUVVWQk8wbEJRME1zVjBGQmIwSXNZVUZCY0VJN096dEJRMjFJVHp0QlFVRkJPMGxFYUVoU0xGVkJRVk1zVTBGQlZEdEpRVU5CTEV0QlFVa3NTMEZCU2p0SlFVTkJMRTlCUVUwc1RVRkJUanRKUVVOQkxFOUJRVTBzVFVGQlRqdEpRVU5CTEU5QlFVMHNTMEZCVGp0SlFVTkJMR3RDUVVGcFFpeExRVUZxUWp0SlFVTkJMR3RDUVVGcFJDeHZRMEZCYWtRN1NVRkRRU3haUVVGWExIZENRVUZZTzBsQlEwRXNWMEZCYzBJc1kwRkJkRUk3TzBGQlJVRTdRVUZEUVR0SlFVTkRMRlZCUVZNc1UwRkJWRHRKUVVOQkxFdEJRVWtzU1VGQlNqdEpRVU5CTEUxQlFVc3NSVUZCVER0SlFVTkJMRk5CUVZFc1RVRkJVanRKUVVOQkxFOUJRVTBzUzBGQlRqdEpRVU5CTEZGQlFVOHNTVUZCVUR0SlFVTkJMR3RDUVVGcFFpeExRVUZxUWp0SlFVTkJMRk5CUVZFc1IwRkJVanM3UVVGRlJEdEpRVU5ETEV0QlFVa3NTMEZCU2p0SlFVTkJMRkZCUVU4c1NVRkJVRHM3TzBGQlJVWTdSVUZEUXl4UFFVRk5MRXRCUVU0N1JVRkRRU3hyUWtGQmFVSXNVVUZCYWtJN1JVRkRRU3hyUWtGQmFVSXNTMEZCYWtJN08wRkZNMFJJTzBWQlEwTXNWMEZCVlN4TlFVRldPMFZCUTBFc1VVRkJUeXhOUVVGUU96dEJRVU5CTzBWQlEwTXNXVUZCVnl4TFFVRllJaXdpWm1sc1pTSTZJbU52YlcxdmJpNWpjM01pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKdFluUXRjbUl0YkNBOUlDZFNiMkp2ZEc4Z1RHbG5hSFFuTENCellXNXpMWE5sY21sbVhHNXRZblF0Y21JdGJTQTlJQ2RTYjJKdmRHOGdUV1ZrYVhWdEp5d2djMkZ1Y3kxelpYSnBabHh1YldKMExYSmlMV0lnUFNBblVtOWliM1J2SUVKdmJHUW5MQ0J6WVc1ekxYTmxjbWxtWEc1dFluUXRjbUl0WW13Z1BTQW5VbTlpYjNSdklFSnNZV05ySnl3Z2MyRnVjeTF6WlhKcFpseHVYRzVBWm05dWRDMW1ZV05sWEc0Z0lHWnZiblF0Wm1GdGFXeDVJQ2RTYjJKdmRHOGdUR2xuYUhRblhHNGdJSE55WXlCMWNtd29KeTR1TDJadmJuUnpMMUp2WW05MGJ5MU1hV2RvZEM1MGRHWW5LU0JtYjNKdFlYUW9KM1J5ZFdWMGVYQmxKeWxjYmx4dVFHWnZiblF0Wm1GalpWeHVJQ0JtYjI1MExXWmhiV2xzZVNBblVtOWliM1J2SUUxbFpHbDFiU2RjYmlBZ2MzSmpJSFZ5YkNnbkxpNHZabTl1ZEhNdlVtOWliM1J2TFUxbFpHbDFiUzUwZEdZbktTQm1iM0p0WVhRb0ozUnlkV1YwZVhCbEp5bGNibHh1UUdadmJuUXRabUZqWlZ4dUlDQm1iMjUwTFdaaGJXbHNlU0FuVW05aWIzUnZJRUp2YkdRblhHNGdJSE55WXlCMWNtd29KeTR1TDJadmJuUnpMMUp2WW05MGJ5MUNiMnhrTG5SMFppY3BJR1p2Y20xaGRDZ25kSEoxWlhSNWNHVW5LVnh1WEc1QVptOXVkQzFtWVdObFhHNGdJR1p2Ym5RdFptRnRhV3g1SUNkU2IySnZkRzhnUW14aFkyc25YRzRnSUhOeVl5QjFjbXdvSnk0dUwyWnZiblJ6TDFKdlltOTBieTFDYkdGamF5NTBkR1luS1NCbWIzSnRZWFFvSjNSeWRXVjBlWEJsSnlsY2JpSXNJaTh2SUZKbGMyVjBYRzR2THlBOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBWeHVYRzR2THlCU1pYTmxkQ0JrWldaaGRXeDBJSE4wZVd4bGN5NWNiaXBjYmx4MGJXRnlaMmx1SURCY2JseDBjR0ZrWkdsdVp5QXdYRzVjZEdadmJuUWdhVzVvWlhKcGRGeHVYSFJpYjNndGMybDZhVzVuSUdKdmNtUmxjaTFpYjNoY2JseHVMeThnU0ZSTlREVWdaR2x6Y0d4aGVTQmtaV1pwYm1sMGFXOXVjMXh1THk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMWNibHh1THk4Z1EyOXljbVZqZENCZ1lteHZZMnRnSUdScGMzQnNZWGtnYm05MElHUmxabWx1WldRZ2FXNGdTVVVnT0M4NUxseHVZWEowYVdOc1pWeHVZWE5wWkdWY2JtUmxkR0ZwYkhOY2JtWnBaMk5oY0hScGIyNWNibVpwWjNWeVpWeHVabTl2ZEdWeVhHNW9aV0ZrWlhKY2JtaG5jbTkxY0Z4dWJXRnBibHh1Ym1GMlhHNXpaV04wYVc5dVhHNXpkVzF0WVhKNVhHNWNkR1JwYzNCc1lYa2dZbXh2WTJ0Y2JseHVMeThnTVM0Z1EyOXljbVZqZENCZ2FXNXNhVzVsTFdKc2IyTnJZQ0JrYVhOd2JHRjVJRzV2ZENCa1pXWnBibVZrSUdsdUlFbEZJRGd2T1M1Y2JpOHZJREl1SUU1dmNtMWhiR2w2WlNCMlpYSjBhV05oYkNCaGJHbG5ibTFsYm5RZ2IyWWdZSEJ5YjJkeVpYTnpZQ0JwYmlCRGFISnZiV1VzSUVacGNtVm1iM2dzSUdGdVpDQlBjR1Z5WVM1Y2JtRjFaR2x2WEc1allXNTJZWE5jYm5CeWIyZHlaWE56WEc1MmFXUmxiMXh1WEhSa2FYTndiR0Y1SUdsdWJHbHVaUzFpYkc5amF5QWdJQ0F2THlBeFhHNWNkSFpsY25ScFkyRnNMV0ZzYVdkdUlHSmhjMlZzYVc1bElDOHZJREpjYmx4dUx5OGdVSEpsZG1WdWRDQnRiMlJsY200Z1luSnZkM05sY25NZ1puSnZiU0JrYVhOd2JHRjVhVzVuSUdCaGRXUnBiMkFnZDJsMGFHOTFkQ0JqYjI1MGNtOXNjeTVjYmk4dklGSmxiVzkyWlNCbGVHTmxjM01nYUdWcFoyaDBJR2x1SUdsUFV5QTFJR1JsZG1salpYTXVYRzVoZFdScGJ6cHViM1FvVzJOdmJuUnliMnh6WFNsY2JseDBaR2x6Y0d4aGVTQnViMjVsWEc1Y2RHaGxhV2RvZENBd1hHNWNiaTh2SUVGa1pISmxjM01nWUZ0b2FXUmtaVzVkWUNCemRIbHNhVzVuSUc1dmRDQndjbVZ6Wlc1MElHbHVJRWxGSURndk9TNWNiaTh2SUVocFpHVWdkR2hsSUdCMFpXMXdiR0YwWldBZ1pXeGxiV1Z1ZENCcGJpQkpSU3dnVTJGbVlYSnBMQ0JoYm1RZ1JtbHlaV1p2ZUNBOElESXlMbHh1VzJocFpHUmxibDFjYm5SbGJYQnNZWFJsWEc1Y2RHUnBjM0JzWVhrZ2JtOXVaVnh1WEc0dkx5QkNZWE5sWEc0dkx5QTlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVnh1WEc0dkx5QXhMaUJUWlhRZ1pHVm1ZWFZzZENCbWIyNTBJR1poYldsc2VTQjBieUJ6WVc1ekxYTmxjbWxtTGx4dUx5OGdNaTRnVUhKbGRtVnVkQ0JwVDFNZ2RHVjRkQ0J6YVhwbElHRmthblZ6ZENCaFpuUmxjaUJ2Y21sbGJuUmhkR2x2YmlCamFHRnVaMlVzSUhkcGRHaHZkWFFnWkdsellXSnNhVzVuSUhWelpYSWdlbTl2YlM1Y2JpOHZJRE11SUZKbGJXOTJaU0JvYVdkb2JHbDBaU0J2YmlCdGIySnBiR1VnWkdWMmFXTmxjeTVjYmk4dklEUXVJRk5sZENCa1pXWmhkV3gwSUdOMWNuTnZjaTVjYm1oMGJXeGNibHgwWm05dWRDMW1ZVzFwYkhrZ2MyRnVjeTF6WlhKcFppQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdNVnh1WEhRdGJYTXRkR1Y0ZEMxemFYcGxMV0ZrYW5WemRDQXhNREFsSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMeUF5WEc1Y2RDMTNaV0pyYVhRdGRHVjRkQzF6YVhwbExXRmthblZ6ZENBeE1EQWxJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SURKY2JseDBMWGRsWW10cGRDMTBZWEF0YUdsbmFHeHBaMmgwTFdOdmJHOXlJSEpuWW1Fb01Dd2dNQ3dnTUN3Z01Da2dJQ0FnTHk4Z00xeHVYSFF0ZDJWaWEybDBMV1p2WTNWekxYSnBibWN0WTI5c2IzSWdjbWRpWVNneU5UVXNJREkxTlN3Z01qVTFMQ0F3S1NBdkx5QXpYRzVjZEdOMWNuTnZjaUJrWldaaGRXeDBJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRFJjYmx4dUx5OGdVMlYwSURFd01DVWdiR2x1WlMxb1pXbG5hSFJjYm1KdlpIbGNibHgwWm05dWRDMXphWHBsSURFd01DVmNibHgwYkdsdVpTMW9aV2xuYUhRZ01WeHVYSFF0Ylc5NkxXOXplQzFtYjI1MExYTnRiMjkwYUdsdVp5Qm5jbUY1YzJOaGJHVmNibHgwTFhkbFltdHBkQzFtYjI1MExYTnRiMjkwYUdsdVp5QmhiblJwWVd4cFlYTmxaRnh1WEc0dkx5Qk1hVzVyYzF4dUx5OGdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmx4dUx5OGdVbVZ0YjNabElIUm9aU0JuY21GNUlHSmhZMnRuY205MWJtUWdZMjlzYjNJZ1puSnZiU0JoWTNScGRtVWdiR2x1YTNNZ2FXNGdTVVVnTVRBdVhHNWhYRzVjZEdKaFkydG5jbTkxYm1RZ2RISmhibk53WVhKbGJuUmNibHh1THk4Z1NXMXdjbTkyWlNCeVpXRmtZV0pwYkdsMGVTQjNhR1Z1SUdadlkzVnpaV1FnWVc1a0lHRnNjMjhnYlc5MWMyVWdhRzkyWlhKbFpDQnBiaUJoYkd3Z1luSnZkM05sY25NdVhHNHFPbVp2WTNWelhHNHFPbUZqZEdsMlpWeHVLanBvYjNabGNseHVYSFJ2ZFhSc2FXNWxJREJjYmx4dUx5OGdWSGx3YjJkeVlYQm9lVnh1THk4Z1BUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMWNibHh1THk4Z1FXUmtjbVZ6Y3lCa2FXWm1aWEpsYm1ObGN5QmlaWFIzWldWdUlFWnBjbVZtYjNnZ1lXNWtJRzkwYUdWeUlHSnliM2R6WlhKekxseHVhSEpjYmx4MFltOTRMWE5wZW1sdVp5QmpiMjUwWlc1MExXSnZlRnh1WEhSb1pXbG5hSFFnTUZ4dVhHNHZMeUJTWlcxdmRtVWdaR1ZtWVhWc2RDQnpkSGxzWlZ4dWIyeGNiblZzWEc1Y2RHeHBjM1F0YzNSNWJHVWdibTl1WlZ4dVhHNHZMeUJKYlhCeWIzWmxJSEpsWVdSaFltbHNhWFI1SUc5bUlIQnlaUzFtYjNKdFlYUjBaV1FnZEdWNGRDQnBiaUJoYkd3Z1luSnZkM05sY25NdVhHNXdjbVZjYmx4MGRHRmlMWE5wZW1VZ05GeHVYSFIzYUdsMFpTMXpjR0ZqWlNCd2NtVXRkM0poY0Z4dVhHNHZMeUJUWlhRZ1kyOXVjMmx6ZEdWdWRDQnhkVzkwWlNCMGVYQmxjeTVjYm5GY2JseDBjWFZ2ZEdWeklDZGNYREl3TVVNbklDZGNYREl3TVVRbklDZGNYREl3TVRnbklDZGNYREl3TVRrblhHNWNiaTh2SUVWdFltVmtaR1ZrSUdOdmJuUmxiblJjYmk4dklEMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlYRzVjYmk4dklGSmxiVzkyWlNCaWIzSmtaWElnZDJobGJpQnBibk5wWkdVZ1lHRmdJR1ZzWlcxbGJuUWdhVzRnU1VVZ09DODVMekV3TGx4dWFXMW5YRzVjZEdKdmNtUmxjaUF3WEc1Y2JpOHZJRU52Y25KbFkzUWdiM1psY21ac2IzY2daR2x6Y0d4aGVXVmtJRzlrWkd4NUlHbHVJRWxGSURrdVhHNXpkbWM2Ym05MEtEcHliMjkwS1Z4dVhIUnZkbVZ5Wm14dmR5Qm9hV1JrWlc1Y2JseHVMeThnUm05eWJYTmNiaTh2SUQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVhHNWNiaTh2SUVGa1pISmxjM01nUm1seVpXWnZlQ0EwS3lCelpYUjBhVzVuSUdCc2FXNWxMV2hsYVdkb2RHQWdiMjRnWUdsdWNIVjBZQ0IxYzJsdVp5QmdJV2x0Y0c5eWRHRnVkR0FnYVc0Z2RHaGxJRlZCSUhOMGVXeGxjMmhsWlhRdVhHNWlkWFIwYjI1Y2JtbHVjSFYwWEc1Y2RHeHBibVV0YUdWcFoyaDBJRzV2Y20xaGJGeHVYRzR2THlCQlpHUnlaWE56SUdsdVkyOXVjMmx6ZEdWdWRDQmdkR1Y0ZEMxMGNtRnVjMlp2Y20xZ0lHbHVhR1Z5YVhSaGJtTmxJR1p2Y2lCZ1luVjBkRzl1WUNCaGJtUWdZSE5sYkdWamRHQXVYRzR2THlCQmJHd2diM1JvWlhJZ1ptOXliU0JqYjI1MGNtOXNJR1ZzWlcxbGJuUnpJR1J2SUc1dmRDQnBibWhsY21sMElHQjBaWGgwTFhSeVlXNXpabTl5YldBZ2RtRnNkV1Z6TGx4dUx5OGdRMjl5Y21WamRDQmdZblYwZEc5dVlDQnpkSGxzWlNCcGJtaGxjbWwwWVc1alpTQnBiaUJEYUhKdmJXVXNJRk5oWm1GeWFTQTFLeXdnWVc1a0lFbEZJRGdyTGx4dUx5OGdRMjl5Y21WamRDQmdjMlZzWldOMFlDQnpkSGxzWlNCcGJtaGxjbWwwWVc1alpTQnBiaUJHYVhKbFptOTRJRFFySUdGdVpDQlBjR1Z5WVM1Y2JtSjFkSFJ2Ymx4dWMyVnNaV04wWEc1Y2RIUmxlSFF0ZEhKaGJuTm1iM0p0SUc1dmJtVmNibHh1THk4Z1FXUmtjbVZ6Y3lCZ2IzWmxjbVpzYjNkZ0lITmxkQ0IwYnlCZ2FHbGtaR1Z1WUNCcGJpQkpSU0E0THprdk1UQXVYRzVpZFhSMGIyNWNibHgwYjNabGNtWnNiM2NnZG1semFXSnNaVnh1WEc0dkx5QXhMaUJCZG05cFpDQjBhR1VnVjJWaVMybDBJR0oxWnlCcGJpQkJibVJ5YjJsa0lEUXVNQzRxSUhkb1pYSmxJQ2d5S1NCa1pYTjBjbTk1Y3lCdVlYUnBkbVVnWUdGMVpHbHZZQ0JoYm1RZ1lIWnBaR1Z2WUNCamIyNTBjbTlzY3k1Y2JpOHZJREl1SUVOdmNuSmxZM1FnYVc1aFltbHNhWFI1SUhSdklITjBlV3hsSUdOc2FXTnJZV0pzWlNCZ2FXNXdkWFJnSUhSNWNHVnpJR2x1SUdsUFV5NWNiaTh2SURNdUlFbHRjSEp2ZG1VZ2RYTmhZbWxzYVhSNUlHRnVaQ0JqYjI1emFYTjBaVzVqZVNCdlppQmpkWEp6YjNJZ2MzUjViR1VnWW1WMGQyVmxiaUJwYldGblpTMTBlWEJsSUdCcGJuQjFkR0FnWVc1a0lHOTBhR1Z5Y3k1Y2JtSjFkSFJ2Ymx4dWFIUnRiQ0JwYm5CMWRGdDBlWEJsUFZ3aVluVjBkRzl1WENKZElDQWdJQ0F2THlBeFhHNXBibkIxZEZ0MGVYQmxQVndpY21WelpYUmNJbDFjYm1sdWNIVjBXM1I1Y0dVOVhDSnpkV0p0YVhSY0lsMWNibHgwTFhkbFltdHBkQzFoY0hCbFlYSmhibU5sSUdKMWRIUnZiaUF2THlBeVhHNWNkR04xY25OdmNpQndiMmx1ZEdWeUlDQWdJQ0FnSUNBZ0lDQWdMeThnTTF4dVhHNHZMeUJTWlMxelpYUWdaR1ZtWVhWc2RDQmpkWEp6YjNJZ1ptOXlJR1JwYzJGaWJHVmtJR1ZzWlcxbGJuUnpMbHh1WW5WMGRHOXVXMlJwYzJGaWJHVmtYVnh1YUhSdGJDQnBibkIxZEZ0a2FYTmhZbXhsWkYxY2JseDBZM1Z5YzI5eUlHUmxabUYxYkhSY2JseHVMeThnUVdSa2NtVnpjeUJpYjNnZ2MybDZhVzVuSUhObGRDQjBieUJnWTI5dWRHVnVkQzFpYjNoZ0lHbHVJRWxGSURndk9TNWNibWx1Y0hWMFczUjVjR1U5WENKamFHVmphMkp2ZUZ3aVhWeHVhVzV3ZFhSYmRIbHdaVDFjSW5KaFpHbHZYQ0pkWEc1Y2RHSnZlQzF6YVhwcGJtY2dZbTl5WkdWeUxXSnZlRnh1WEc0dkx5QkdhWGdnZEdobElHTjFjbk52Y2lCemRIbHNaU0JtYjNJZ1EyaHliMjFsSjNNZ2FXNWpjbVZ0Wlc1MEwyUmxZM0psYldWdWRDQmlkWFIwYjI1ekxpQkdiM0lnWTJWeWRHRnBibHh1THk4Z1lHWnZiblF0YzJsNlpXQWdkbUZzZFdWeklHOW1JSFJvWlNCZ2FXNXdkWFJnTENCcGRDQmpZWFZ6WlhNZ2RHaGxJR04xY25OdmNpQnpkSGxzWlNCdlppQjBhR1ZjYmk4dklHUmxZM0psYldWdWRDQmlkWFIwYjI0Z2RHOGdZMmhoYm1kbElHWnliMjBnWUdSbFptRjFiSFJnSUhSdklHQjBaWGgwWUM1Y2JtbHVjSFYwVzNSNWNHVTlYQ0p1ZFcxaVpYSmNJbDA2T2kxM1pXSnJhWFF0YVc1dVpYSXRjM0JwYmkxaWRYUjBiMjVjYm1sdWNIVjBXM1I1Y0dVOVhDSnVkVzFpWlhKY0lsMDZPaTEzWldKcmFYUXRiM1YwWlhJdGMzQnBiaTFpZFhSMGIyNWNibHgwYUdWcFoyaDBJR0YxZEc5Y2JseHVMeThnTVM0Z1FXUmtjbVZ6Y3lCZ1lYQndaV0Z5WVc1alpXQWdjMlYwSUhSdklHQnpaV0Z5WTJobWFXVnNaR0FnYVc0Z1UyRm1ZWEpwSURVZ1lXNWtJRU5vY205dFpTNWNiaTh2SURJdUlFRmtaSEpsYzNNZ1lHSnZlQzF6YVhwcGJtZGdJSE5sZENCMGJ5QmdZbTl5WkdWeUxXSnZlR0FnYVc0Z1UyRm1ZWEpwSURVZ1lXNWtJRU5vY205dFpTQW9hVzVqYkhWa1pTQmdMVzF2ZW1BZ2RHOGdablYwZFhKbExYQnliMjltS1M1Y2JtbHVjSFYwVzNSNWNHVTlYQ0p6WldGeVkyaGNJbDFjYmx4MExYZGxZbXRwZEMxaGNIQmxZWEpoYm1ObElIUmxlSFJtYVdWc1pDQXZMeUF4WEc1Y2RHSnZlQzF6YVhwcGJtY2dZMjl1ZEdWdWRDMWliM2hjYmx4dUx5OGdVbVZ0YjNabElHbHVibVZ5SUhCaFpHUnBibWNnWVc1a0lITmxZWEpqYUNCallXNWpaV3dnWW5WMGRHOXVJR2x1SUZOaFptRnlhU0ExSUdGdVpDQkRhSEp2YldVZ2IyNGdUMU1nV0M1Y2JtbHVjSFYwVzNSNWNHVTlYQ0p6WldGeVkyaGNJbDA2T2kxM1pXSnJhWFF0YzJWaGNtTm9MV05oYm1ObGJDMWlkWFIwYjI1Y2JtbHVjSFYwVzNSNWNHVTlYQ0p6WldGeVkyaGNJbDA2T2kxM1pXSnJhWFF0YzJWaGNtTm9MV1JsWTI5eVlYUnBiMjVjYmx4MExYZGxZbXRwZEMxaGNIQmxZWEpoYm1ObElHNXZibVZjYmx4dUx5OGdVbVZ0YjNabElHbHVibVZ5SUhCaFpHUnBibWNnWVc1a0lHSnZjbVJsY2lCcGJpQkdhWEpsWm05NElEUXJMbHh1WW5WMGRHOXVPam90Ylc5NkxXWnZZM1Z6TFdsdWJtVnlYRzVwYm5CMWREbzZMVzF2ZWkxbWIyTjFjeTFwYm01bGNseHVYSFJpYjNKa1pYSWdNRnh1WEhSd1lXUmthVzVuSURCY2JseHVMeThnTVM0Z1VtVnRiM1psSUdSbFptRjFiSFFnZG1WeWRHbGpZV3dnYzJOeWIyeHNZbUZ5SUdsdUlFbEZJRGd2T1M1Y2JpOHZJREl1SUVsdGNISnZkbVVnY21WaFpHRmlhV3hwZEhrZ1lXNWtJR0ZzYVdkdWJXVnVkQ0JwYmlCaGJHd2dZbkp2ZDNObGNuTXVYRzUwWlhoMFlYSmxZVnh1WEhSdmRtVnlabXh2ZHlCaGRYUnZJQ0FnSUNBZ0x5OGdNVnh1WEhSMlpYSjBhV05oYkMxaGJHbG5iaUIwYjNBZ0x5OGdNbHh1WEc0dkx5QlNaWE5sZENCMWJuVnpkV0ZzSUVacGNtVm1iM2d0YjI0dFFXNWtjbTlwWkNCa1pXWmhkV3gwSUhOMGVXeGxMbHh1WW5WMGRHOXVYRzVwYm5CMWRGeHVjMlZzWldOMFcyMTFiSFJwY0d4bFhWeHVkR1Y0ZEdGeVpXRmNibHgwWW1GamEyZHliM1Z1WkMxcGJXRm5aU0J1YjI1bFhHNWNiaTh2SURFdUlGSmxiVzkyWlNCZ1ltOXlaR1Z5TFhKaFpHbDFjMkFnYVc0Z2FVOVRMbHh1THk4Z01pNGdVbVZ0YjNabElHQmliM2d0YzJoaFpHOTNZQ0JwYmlCcFQxTXVYRzVwYm5CMWRGeHVjMlZzWldOMFhHNTBaWGgwWVhKbFlWeHVYSFJpYjNKa1pYSXRjbUZrYVhWeklEQWdMeThnTVZ4dVhIUmliM2d0YzJoaFpHOTNJRzV2Ym1VZ0x5OGdNbHh1WEc0dkx5QXhMaUJFYVhOaFlteGxJSEpsYzJsNlpTNWNiaTh2SURJdUlFRnNiRzkzSUhWelpYSWdjMlZzWldOMExseHVhVzV3ZFhSY2JuUmxlSFJoY21WaFhHNWNkSEpsYzJsNlpTQnViMjVsSUNBZ0lDQWdMeThnTVZ4dVhIUjFjMlZ5TFhObGJHVmpkQ0IwWlhoMElDOHZJREpjYmx4dUx5OGdTR2xrWlNCd2JHRmpaV2h2YkdSbGNpQnZiaUJtYjJOMWN5NWNibHR3YkdGalpXaHZiR1JsY2wwNlptOWpkWE02T25Cc1lXTmxhRzlzWkdWeVhHNWNkR052Ykc5eUlIUnlZVzV6Y0dGeVpXNTBYRzVjYmk4dklGUmhZbXhsYzF4dUx5OGdQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDA5UFQwOVBUMDlQVDFjYmx4dUx5OGdVbVZ0YjNabElHMXZjM1FnYzNCaFkybHVaeUJpWlhSM1pXVnVJSFJoWW14bElHTmxiR3h6TGx4dWRHRmliR1ZjYmx4MFltOXlaR1Z5TFdOdmJHeGhjSE5sSUdOdmJHeGhjSE5sWEc1Y2RHSnZjbVJsY2kxemNHRmphVzVuSURCY2JpSXNJaTVtYjNKclhHNWNkQ1k2T25ObGJHVmpkR2x2Ymx4dVhIUmNkR0poWTJ0bmNtOTFibVF0WTI5c2IzSWdkSEpoYm5Od1lYSmxiblJjYmx4dVhIUXJabkp2YlMxM2FXUjBhQ2cxTkRGd2VDbGNibHgwWEhSd2IzTnBkR2x2YmlCaFluTnZiSFYwWlZ4dVhIUmNkSFJ2Y0NBd1hHNWNkRngwY21sbmFIUWdNRnh1WEhSY2RHUnBjM0JzWVhrZ1lteHZZMnRjYmx4MFhIUm9aV2xuYUhRZ01qQXdjSGhjYmx4MFhIUjNhV1IwYUNBeU1EQndlRnh1WEhSY2RHOTJaWEptYkc5M0lHaHBaR1JsYmx4dVhHNWNkQ1pmWDJ4cGJtdGNibHgwWEhSa2FYTndiR0Y1SUdKc2IyTnJYRzVjZEZ4MGNHRmtaR2x1WnlBMWNIZ2dOREJ3ZUZ4dVhIUmNkR1p2Ym5RZ1ltOXNaQ0F4Y21WdEx6SnlaVzBnWVhKcFlXd3NJSE5oYm5NdGMyVnlhV1pjYmx4MFhIUm1iMjUwTFhkbGFXZG9kQ0JpYjJ4a1hHNWNkRngwZEdWNGRDMWhiR2xuYmlCalpXNTBaWEpjYmx4MFhIUjBaWGgwTFdSbFkyOXlZWFJwYjI0Z2JtOXVaVnh1WEhSY2RIUnlZVzV6YVhScGIyNGdZbUZqYTJkeWIzVnVaQ0F1TWpWeklHVmhjMlV0YjNWMExDQmpiMnh2Y2lBdU1qVnpJR1ZoYzJVdGIzVjBYRzVjYmx4MFhIUXJkRzh0ZDJsa2RHZ29OVFF3Y0hncFhHNWNkRngwWEhSdFlYSm5hVzR0ZEc5d0lEUXdjSGhjYmx4MFhIUmNkR052Ykc5eUlDTmxOelJqTTJOY2JseDBYSFJjZEdKdmNtUmxjaTF5WVdScGRYTWdOSEI0WEc1Y2JseDBYSFJjZENZNllXTjBhWFpsWEc1Y2RGeDBYSFJjZEhSeVlXNXpabTl5YlNCelkyRnNaU2d1T1RjMUtWeHVYRzVjZEZ4MEsyWnliMjB0ZDJsa2RHZ29OVFF4Y0hncFhHNWNkRngwWEhSd2IzTnBkR2x2YmlCaFluTnZiSFYwWlZ4dVhIUmNkRngwZEc5d0lEVXdjSGhjYmx4MFhIUmNkSEpwWjJoMElDMDFOSEI0WEc1Y2RGeDBYSFIzYVdSMGFDQXlOVEJ3ZUZ4dVhIUmNkRngwWTI5c2IzSWdJMlptWmx4dVhIUmNkRngwWW1GamEyZHliM1Z1WkMxamIyeHZjaUFqTWpJeVhHNWNkRngwWEhSaVlXTnJaM0p2ZFc1a0xXbHRZV2RsSUhWeWJDZ3VMaTlwYldGblpYTXZkbVZ5ZEdsallXd3RZMnh2ZEdndWNHNW5LVnh1WEhSY2RGeDBZbTk0TFhOb1lXUnZkeUF3SURBZ09IQjRJSEpuWW1Fb01Dd2dNQ3dnTUN3Z0xqVXBYRzVjZEZ4MFhIUjBjbUZ1YzJadmNtMGdjbTkwWVhSbEtEUTFaR1ZuS1Z4dVhHNWNkRngwWEhRbU9tSmxabTl5WlZ4dVhIUmNkRngwSmpwaFpuUmxjbHh1WEhSY2RGeDBYSFJ3YjNOcGRHbHZiaUJoWW5OdmJIVjBaVnh1WEhSY2RGeDBYSFIwYjNBZ01YQjRYRzVjZEZ4MFhIUmNkR3hsWm5RZ01GeHVYSFJjZEZ4MFhIUmthWE53YkdGNUlHSnNiMk5yWEc1Y2RGeDBYSFJjZEhkcFpIUm9JREV3TUNWY2JseDBYSFJjZEZ4MGFHVnBaMmgwSURGd2VGeHVYSFJjZEZ4MFhIUmlZV05yWjNKdmRXNWtMV052Ykc5eUlDTm1abVpjYmx4MFhIUmNkRngwWTI5dWRHVnVkQ0FuSjF4dVhHNWNkRngwWEhRbU9tRm1kR1Z5WEc1Y2RGeDBYSFJjZEhSdmNDQmhkWFJ2WEc1Y2RGeDBYSFJjZEdKdmRIUnZiU0F4Y0hoY2JseHVYSFJjZENZNmFHOTJaWEpjYmx4MFhIUmNkR052Ykc5eUlDTm1abVpjYmx4MFhIUmNkR0poWTJ0bmNtOTFibVF0WTI5c2IzSWdJMlUzTkdNelkxeHVYSFJjZEZ4MFltRmphMmR5YjNWdVpDMXBiV0ZuWlNCdWIyNWxYRzRpTENKaVlYTmxMV1p2Ym5RdGMybDZaU0EvUFNBeE5uQjRYRzV5WVhOMFpYSnBjMlV0YldWa2FXRXRjWFZsY21sbGN5QS9QU0JtWVd4elpWeHVYRzV5ZFhCMGRYSmxJRDBnZTF4dUlDQnlZWE4wWlhKcGMyVXRiV1ZrYVdFdGNYVmxjbWxsY3pvZ2NtRnpkR1Z5YVhObExXMWxaR2xoTFhGMVpYSnBaWE5jYmlBZ2JXOWlhV3hsTFdOMWRHOW1aam9nTkRBd2NIaGNiaUFnWkdWemEzUnZjQzFqZFhSdlptWTZJREV3TlRCd2VGeHVJQ0JvWkMxamRYUnZabVk2SURFNE1EQndlRnh1SUNCbGJtRmliR1V0WlcwdFluSmxZV3R3YjJsdWRITTZJR1poYkhObFhHNGdJR0poYzJVdFptOXVkQzF6YVhwbE9pQmlZWE5sTFdadmJuUXRjMmw2WlZ4dUlDQmhiblJwTFc5MlpYSnNZWEE2SUdaaGJITmxYRzRnSUdSbGJuTnBkSGt0Y1hWbGNtbGxjem9nSjJSd2NIZ25JQ2QzWldKcmFYUW5JQ2R0YjNvbklDZGtjR2tuWEc0Z0lISmxkR2x1WVMxa1pXNXphWFI1T2lBeExqVmNiaUFnZFhObExXUmxkbWxqWlMxM2FXUjBhRG9nWm1Gc2MyVmNibjFjYm5KMWNIUjFjbVV1YzJOaGJHVWdQU0F3SUNoeWRYQjBkWEpsTG0xdlltbHNaUzFqZFhSdlptWXBJRFl3TUhCNElEZ3dNSEI0SUNoeWRYQjBkWEpsTG1SbGMydDBiM0F0WTNWMGIyWm1LU0FvY25Wd2RIVnlaUzVvWkMxamRYUnZabVlwWEc1eWRYQjBkWEpsTG5OallXeGxMVzVoYldWeklEMGdKM2h6SnlBbmN5Y2dKMjBuSUNkc0p5QW5lR3duSUNkb1pDZGNibHh1TFdsekxYTjBjbWx1WnloMllXd3BYRzRnSUdsbUlIUjVjR1Z2WmloMllXd3BJR2x6SUc1dmRDQW5kVzVwZENkY2JpQWdJQ0JwWmlCMllXd2dhWE1nWVNBbmMzUnlhVzVuSnlCdmNpQjJZV3dnYVhNZ1lTQW5hV1JsYm5RblhHNGdJQ0FnSUNCMGNuVmxYRzRnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdabUZzYzJWY2JpQWdaV3h6WlZ4dUlDQWdJR1poYkhObFhHNWNiaTFuWlhRdGMyTmhiR1V0Ym5WdFltVnlLSE5qWVd4bExXNWhiV1VwWEc0Z0lHWnZjaUJzYVhOMExXbDBaVzBzSUdrZ2FXNGdjblZ3ZEhWeVpTNXpZMkZzWlMxdVlXMWxjMXh1SUNBZ0lHbG1JR3hwYzNRdGFYUmxiU0JwY3lCelkyRnNaUzF1WVcxbFhHNGdJQ0FnSUNCeVpYUjFjbTRnYVNBcklERmNiaUFnY21WMGRYSnVJR1poYkhObFhHNWNiaTFqYjI1MlpYSjBMWFJ2S0hSdkxYVnVhWFFzSUhaaGJIVmxMQ0JqYjI1MFpYaDBJRDBnY25Wd2RIVnlaUzVpWVhObExXWnZiblF0YzJsNlpTbGNiaUFnWm5KdmJTMTFibWwwSUQwZ2RXNXBkQ2gyWVd4MVpTbGNiaUFnY21WMGRYSnVJSFpoYkhWbElHbG1JSFJ2TFhWdWFYUWdhWE1nWm5KdmJTMTFibWwwWEc0Z0lHbG1JSFJ2TFhWdWFYUWdhVzRnS0NkbGJTY2dKM0psYlNjcFhHNGdJQ0FnY21WMGRYSnVJSFpoYkhWbElHbG1JR1p5YjIwdGRXNXBkQ0JwYmlBb0oyVnRKeUFuY21WdEp5bGNiaUFnSUNCeVpYUjFjbTRnZFc1cGRDZ29kbUZzZFdVZ0x5QmpiMjUwWlhoMEtTd2dkRzh0ZFc1cGRDbGNiaUFnYVdZZ2RHOHRkVzVwZENCcGN5QW5jSGduWEc0Z0lDQWdjbVYwZFhKdUlIVnVhWFFvS0haaGJIVmxJQ29nWTI5dWRHVjRkQ2tzSUNkd2VDY3BYRzVjYmkxdmJpMXpZMkZzWlNodUtWeHVJQ0J5WlhSMWNtNGdkVzVwZENodUtTQnBjeUFuSjF4dVhHNHRiR0Z5WjJWeUxYUm9ZVzR0YzJOaGJHVW9iaWxjYmlBZ2NtVjBkWEp1SUNodUlENGdLR3hsYm1kMGFDaHlkWEIwZFhKbExuTmpZV3hsS1NBdElERXBLU0JoYm1RZ0xXOXVMWE5qWVd4bEtHNHBYRzVjYmkxcGN5MTZaWEp2S0c0cFhHNGdJSEpsZEhWeWJpQnVJR2x6SURCY2JseHVMVzkyWlhKc1lYQXRjMmhwWm5Rb1lXNTBhUzF2ZG1WeWJHRndMQ0J1S1Z4dUlDQnphR2xtZEMxMWJtbDBJRDBnZFc1cGRDaHVLVnh1SUNCaGJuUnBMVzkyWlhKc1lYQWdQU0F3Y0hnZ2RXNXNaWE56SUdGdWRHa3RiM1psY214aGNGeHVJQ0JoYm5ScExXOTJaWEpzWVhBZ1BTQXhjSGdnYVdZZ1lXNTBhUzF2ZG1WeWJHRndJR2x6SUhSeWRXVmNiaUFnYVdZZ2JHVnVaM1JvS0dGdWRHa3RiM1psY214aGNDa2dhWE1nTVZ4dUlDQWdJSEpsZEhWeWJpQXRZMjl1ZG1WeWRDMTBieWh6YUdsbWRDMTFibWwwTENCaGJuUnBMVzkyWlhKc1lYQXBYRzRnSUdadmNpQjJZV3dnYVc0Z1lXNTBhUzF2ZG1WeWJHRndYRzRnSUNBZ2NtVjBkWEp1SUhaaGJDQnBaaUIxYm1sMEtIWmhiQ2tnYVhNZ2MyaHBablF0ZFc1cGRGeHVYRzR0WVdScWRYTjBMVzkyWlhKc1lYQW9ZVzUwYVMxdmRtVnliR0Z3TENCdUxDQnphV1JsSUQwZ0oyMXBiaWNwWEc0Z0lDMXphR2xtZENBOUlDMXZkbVZ5YkdGd0xYTm9hV1owS0dGdWRHa3RiM1psY214aGNDd2diaWxjYmlBZ2FXWWdLSE5wWkdVZ2FYTWdKMjFwYmljZ1lXNWtJQzF6YUdsbWRDQStJREFwSUc5eUlDaHphV1JsSUdseklDZHRZWGduSUdGdVpDQXRjMmhwWm5RZ1BDQXdLVnh1SUNBZ0lHNGdQU0J1SUNzZ0xYTm9hV1owWEc0Z0lISmxkSFZ5YmlCdVhHNWNiaTFwY3kxd2IzTnBkR2wyWlNodUtWeHVJQ0J5WlhSMWNtNGdiaUErUFNBd1hHNWNiaTFrWlc1emFYUjVMWEYxWlhKcFpYTW9aR1Z1YzJsMGVTbGNiaUFnYVdZZ2RIbHdaVzltS0dSbGJuTnBkSGtwSUdseklHNXZkQ0FuZFc1cGRDZGNiaUFnSUNCcFppQnViM1FnTFdsekxYTjBjbWx1Wnloa1pXNXphWFI1S1Z4dUlDQWdJQ0FnWkdWdWMybDBlU0E5SUNjbGN5Y2dKU0JrWlc1emFYUjVYRzRnSUdSbGJuTnBkSGtnUFNCeWRYQjBkWEpsTG5KbGRHbHVZUzFrWlc1emFYUjVJR2xtSUdSbGJuTnBkSGtnYVhNZ0ozSmxkR2x1WVNkY2JpQWdjWFZsY21sbGN5QTlJQ2dwWEc0Z0lHWnZjaUJ4ZFdWeWVTQnBiaUJ5ZFhCMGRYSmxMbVJsYm5OcGRIa3RjWFZsY21sbGMxeHVJQ0FnSUdsbUlIRjFaWEo1SUdseklDZDNaV0pyYVhRblhHNGdJQ0FnSUNCd2RYTm9LSEYxWlhKcFpYTXNJQ2NvTFhkbFltdHBkQzF0YVc0dFpHVjJhV05sTFhCcGVHVnNMWEpoZEdsdk9pQWxjeWtuSUNVZ0tHUmxibk5wZEhrcEtWeHVJQ0FnSUdWc2MyVWdhV1lnY1hWbGNua2dhWE1nSjIxdmVpZGNiaUFnSUNBZ0lIQjFjMmdvY1hWbGNtbGxjeXdnSnlodGFXNHRMVzF2ZWkxa1pYWnBZMlV0Y0dsNFpXd3RjbUYwYVc4NklDVnpLU2NnSlNBb1pHVnVjMmwwZVNrcFhHNGdJQ0FnWld4elpTQnBaaUJ4ZFdWeWVTQnBjeUFuYnlkY2JpQWdJQ0FnSUhCMWMyZ29jWFZsY21sbGN5d2dKeWd0YnkxdGFXNHRaR1YyYVdObExYQnBlR1ZzTFhKaGRHbHZPaUFsY3k4eEtTY2dKU0FvWkdWdWMybDBlU2twWEc0Z0lDQWdaV3h6WlNCcFppQnhkV1Z5ZVNCcGN5QW5jbUYwYVc4blhHNGdJQ0FnSUNCd2RYTm9LSEYxWlhKcFpYTXNJQ2NvYldsdUxXUmxkbWxqWlMxd2FYaGxiQzF5WVhScGJ6b2dKWE1wSnlBbElDaGtaVzV6YVhSNUtTbGNiaUFnSUNCbGJITmxJR2xtSUhGMVpYSjVJR2x6SUNka2NHa25YRzRnSUNBZ0lDQnBaaUF0YVhNdGMzUnlhVzVuS0dSbGJuTnBkSGtwWEc0Z0lDQWdJQ0FnSUdSbGJuTnBkSGs5WTI5dWRtVnlkQ2hrWlc1emFYUjVLVnh1SUNBZ0lDQWdjSFZ6YUNoeGRXVnlhV1Z6TENBbktHMXBiaTF5WlhOdmJIVjBhVzl1T2lBbGMyUndhU2tuSUNVZ0tISnZkVzVrS0dSbGJuTnBkSGtnS2lBNU5pd2dNU2twS1Z4dUlDQWdJR1ZzYzJVZ2FXWWdjWFZsY25rZ2FYTWdKMlJ3Y0hnblhHNGdJQ0FnSUNCd2RYTm9LSEYxWlhKcFpYTXNJQ2NvYldsdUxYSmxjMjlzZFhScGIyNDZJQ1Z6WkhCd2VDa25JQ1VnS0dSbGJuTnBkSGtwS1Z4dUlDQnlaWFIxY200Z2NYVmxjbWxsYzF4dVhHNWpjbVZoZEdVdFptRnNiR0poWTJzdFkyeGhjM01vYzJWc1pXTjBaV1FzSUdOc1lYTnpLVnh1SUNBdmV5Y25JQ3NnWTJ4aGMzTWdLeUFuSUNjZ0t5QnpaV3hsWTNSbFpIMWNiaUFnSUNCN1lteHZZMnQ5WEc1Y2JpOHZJQ3RpWlhSM1pXVnVLRzFwYml3Z2JXRjRLVnh1THk4Z2RYTmhaMlVnS0hOallXeGxJR05oYmlCaVpTQnRhWGhsWkNCM2FYUm9JR04xYzNSdmJTQjJZV3gxWlhNcE9seHVMeThnSUNBdElDdGlaWFIzWldWdUtERXNJRE1wSUhOallXeGxPbk5qWVd4bFhHNHZMeUFnSUMwZ0sySmxkSGRsWlc0b01Dd2dNeWtnTUNCM2FXUjBhRHB6WTJGc1pWeHVMeThnSUNBdElDdGlaWFIzWldWdUtESXdNSEI0TENBMU1EQndlQ2tnWTNWemRHOXRPbU4xYzNSdmJWeHVMeThnSUNBdElDdGlaWFIzWldWdUtEQXNJRE13TUhCNEtTQXdJSGRwWkhSb09tTjFjM1J2YlZ4dUx5OGdJQ0F0SUN0aVpYUjNaV1Z1S0RFc0lETXdNSEI0S1NCelkyRnNaVHBqZFhOMGIyMWNiaTh2SUNBZ0xTQXJZbVYwZDJWbGJpZ3lNREJ3ZUN3Z05Da2dZM1Z6ZEc5dE9uTmpZV3hsWEc1Y2JtSmxkSGRsWlc0b2JXbHVMQ0J0WVhnc0lHRnVkR2t0YjNabGNteGhjQ0E5SUhKMWNIUjFjbVV1WVc1MGFTMXZkbVZ5YkdGd0xDQmtaVzV6YVhSNUlEMGdiblZzYkN3Z2IzSnBaVzUwWVhScGIyNGdQU0J1ZFd4c0xDQjFjMlV0WkdWMmFXTmxMWGRwWkhSb0lEMGdjblZ3ZEhWeVpTNTFjMlV0WkdWMmFXTmxMWGRwWkhSb0xDQm1ZV3hzWW1GamF5MWpiR0Z6Y3lBOUlHNTFiR3dwWEc0Z0lITmxiR1ZqZEdWa0lEMGdjMlZzWldOMGIzSW9LVnh1WEc0Z0lHbG1JQzFwY3kxemRISnBibWNvYjNKcFpXNTBZWFJwYjI0cFhHNGdJQ0FnYjNKcFpXNTBZWFJwYjI0Z1BTQmpiMjUyWlhKMEtHOXlhV1Z1ZEdGMGFXOXVLVnh1SUNCcFppQXRhWE10YzNSeWFXNW5LR1JsYm5OcGRIa3BYRzRnSUNBZ1pHVnVjMmwwZVNBOUlHTnZiblpsY25Rb1pHVnVjMmwwZVNsY2JpQWdhV1lnTFdsekxYTjBjbWx1WnlodGFXNHBYRzRnSUNBZ2JXbHVJRDBnTFdkbGRDMXpZMkZzWlMxdWRXMWlaWElvYldsdUtWeHVJQ0JwWmlBdGFYTXRjM1J5YVc1bktHMWhlQ2xjYmlBZ0lDQnRZWGdnUFNBdFoyVjBMWE5qWVd4bExXNTFiV0psY2lodFlYZ3BYRzVjYmlBZ0xXMXBiaUE5SUhKMWNIUjFjbVV1YzJOaGJHVmJiV2x1SUMwZ01WMGdkVzVzWlhOeklDMXBjeTE2WlhKdktHMXBiaWtnYjNJZ0tHNXZkQ0F0YjI0dGMyTmhiR1VvYldsdUtTbGNiaUFnTFcxaGVDQTlJSEoxY0hSMWNtVXVjMk5oYkdWYmJXRjRYU0IxYm14bGMzTWdibTkwSUMxdmJpMXpZMkZzWlNodFlYZ3BYRzRnSUMxdGFXNGdQejBnYldsdVhHNGdJQzF0WVhnZ1B6MGdiV0Y0WEc1Y2JpQWdhV1lnS0hKMWNIUjFjbVV1Y21GemRHVnlhWE5sTFcxbFpHbGhMWEYxWlhKcFpYTXBYRzRnSUNBZ2FXWWdibTkwSUNoa1pXNXphWFI1SUc5eUlDMXRZWGdnYjNJZ2IzSnBaVzUwWVhScGIyNHBYRzRnSUNBZ0lDQjdZbXh2WTJ0OVhHNGdJR1ZzYzJWY2JpQWdJQ0JqYjI1a2FYUnBiMjRnUFNBbmIyNXNlU0J6WTNKbFpXNG5YRzRnSUNBZ2RYTmxMV1JsZG1salpTMTNhV1IwYUNBOUlIVnpaUzFrWlhacFkyVXRkMmxrZEdnZ1B5QW5aR1YyYVdObExTY2dPaUFuSjF4dUlDQWdJSFZ1YkdWemN5QXRiV2x1SUdseklEQmNiaUFnSUNBZ0lDMXRhVzRnUFNBdFkyOXVkbVZ5ZEMxMGJ5Z25aVzBuTENBdGJXbHVLU0JwWmlCeWRYQjBkWEpsTG1WdVlXSnNaUzFsYlMxaWNtVmhhM0J2YVc1MGMxeHVJQ0FnSUNBZ0xXMXBiaUE5SUMxaFpHcDFjM1F0YjNabGNteGhjQ2hoYm5ScExXOTJaWEpzWVhBc0lDMXRhVzRzSUhOcFpHVTZJQ2R0YVc0bktWeHVJQ0FnSUNBZ1kyOXVaR2wwYVc5dUlEMGdZMjl1WkdsMGFXOXVJQ3NnSnlCaGJtUWdLRzFwYmkwbklDc2dkWE5sTFdSbGRtbGpaUzEzYVdSMGFDQXJJQ2QzYVdSMGFEb2dKWE1wSnlBbElDZ3RiV2x1S1Z4dUlDQWdJSFZ1YkdWemN5QXRiR0Z5WjJWeUxYUm9ZVzR0YzJOaGJHVW9iV0Y0S1Z4dUlDQWdJQ0FnTFcxaGVDQTlJQzFqYjI1MlpYSjBMWFJ2S0NkbGJTY3NJQzF0WVhncElHbG1JSEoxY0hSMWNtVXVaVzVoWW14bExXVnRMV0p5WldGcmNHOXBiblJ6WEc0Z0lDQWdJQ0F0YldGNElEMGdMV0ZrYW5WemRDMXZkbVZ5YkdGd0tHRnVkR2t0YjNabGNteGhjQ3dnTFcxaGVDd2djMmxrWlRvZ0oyMWhlQ2NwWEc0Z0lDQWdJQ0JqYjI1a2FYUnBiMjRnUFNCamIyNWthWFJwYjI0Z0t5QW5JR0Z1WkNBb2JXRjRMU2NnS3lCMWMyVXRaR1YyYVdObExYZHBaSFJvSUNzZ0ozZHBaSFJvT2lBbGN5a25JQ1VnS0MxdFlYZ3BYRzRnSUNBZ2FXWWdiM0pwWlc1MFlYUnBiMjVjYmlBZ0lDQWdJR052Ym1ScGRHbHZiaUE5SUdOdmJtUnBkR2x2YmlBcklDY2dZVzVrSUNodmNtbGxiblJoZEdsdmJqb2dKWE1wSnlBbElDaHZjbWxsYm5SaGRHbHZiaWxjYmlBZ0lDQnBaaUJrWlc1emFYUjVYRzRnSUNBZ0lDQmpiMjVrYVhScGIyNXpJRDBnS0NsY2JpQWdJQ0FnSUdadmNpQnhkV1Z5ZVNCcGJpQXRaR1Z1YzJsMGVTMXhkV1Z5YVdWektHUmxibk5wZEhrcFhHNGdJQ0FnSUNBZ0lIQjFjMmdvWTI5dVpHbDBhVzl1Y3l3Z1kyOXVaR2wwYVc5dUlDc2dKeUJoYm1RZ0pYTW5JQ1VnS0hGMVpYSjVLU2xjYmlBZ0lDQWdJR052Ym1ScGRHbHZiaUE5SUdwdmFXNG9KeXdnSnl3Z1kyOXVaR2wwYVc5dWN5bGNiaUFnSUNCQWJXVmthV0VnWTI5dVpHbDBhVzl1WEc0Z0lDQWdJQ0I3WW14dlkydDlYRzRnSUdsbUlHWmhiR3hpWVdOckxXTnNZWE56WEc0Z0lDQWdLMk55WldGMFpTMW1ZV3hzWW1GamF5MWpiR0Z6Y3loelpXeGxZM1JsWkN3Z1ptRnNiR0poWTJzdFkyeGhjM01wWEc0Z0lDQWdJQ0I3WW14dlkydDlYRzVjYm1GMEtITmpZV3hsTFhCdmFXNTBMQ0JoYm5ScExXOTJaWEpzWVhBZ1BTQnlkWEIwZFhKbExtRnVkR2t0YjNabGNteGhjQ3dnWkdWdWMybDBlU0E5SUc1MWJHd3NJRzl5YVdWdWRHRjBhVzl1SUQwZ2JuVnNiQ3dnZFhObExXUmxkbWxqWlMxM2FXUjBhQ0E5SUhKMWNIUjFjbVV1ZFhObExXUmxkbWxqWlMxM2FXUjBhQ3dnWm1Gc2JHSmhZMnN0WTJ4aGMzTWdQU0J1ZFd4c0tWeHVJQ0JwWmlBdGFYTXRjM1J5YVc1bktHOXlhV1Z1ZEdGMGFXOXVLVnh1SUNBZ0lHOXlhV1Z1ZEdGMGFXOXVJRDBnWTI5dWRtVnlkQ2h2Y21sbGJuUmhkR2x2YmlsY2JpQWdhV1lnTFdsekxYTjBjbWx1Wnloa1pXNXphWFI1S1Z4dUlDQWdJR1JsYm5OcGRIa2dQU0JqYjI1MlpYSjBLR1JsYm5OcGRIa3BYRzRnSUN0aVpYUjNaV1Z1S0hOallXeGxMWEJ2YVc1MExDQnpZMkZzWlMxd2IybHVkQ3dnWVc1MGFTMXZkbVZ5YkdGd0xDQmtaVzV6YVhSNUxDQnZjbWxsYm5SaGRHbHZiaXdnZFhObExXUmxkbWxqWlMxM2FXUjBhQ3dnWm1Gc2JHSmhZMnN0WTJ4aGMzTXBYRzRnSUNBZ2UySnNiMk5yZlZ4dVhHNW1jbTl0TFhkcFpIUm9LSE5qWVd4bExYQnZhVzUwTENCaGJuUnBMVzkyWlhKc1lYQWdQU0J5ZFhCMGRYSmxMbUZ1ZEdrdGIzWmxjbXhoY0N3Z1pHVnVjMmwwZVNBOUlHNTFiR3dzSUc5eWFXVnVkR0YwYVc5dUlEMGdiblZzYkN3Z2RYTmxMV1JsZG1salpTMTNhV1IwYUNBOUlISjFjSFIxY21VdWRYTmxMV1JsZG1salpTMTNhV1IwYUN3Z1ptRnNiR0poWTJzdFkyeGhjM01nUFNCdWRXeHNLVnh1SUNCcFppQXRhWE10YzNSeWFXNW5LRzl5YVdWdWRHRjBhVzl1S1Z4dUlDQWdJRzl5YVdWdWRHRjBhVzl1SUQwZ1kyOXVkbVZ5ZENodmNtbGxiblJoZEdsdmJpbGNiaUFnYVdZZ0xXbHpMWE4wY21sdVp5aGtaVzV6YVhSNUtWeHVJQ0FnSUdSbGJuTnBkSGtnUFNCamIyNTJaWEowS0dSbGJuTnBkSGtwWEc0Z0lDdGlaWFIzWldWdUtITmpZV3hsTFhCdmFXNTBMQ0JzWlc1bmRHZ29jblZ3ZEhWeVpTNXpZMkZzWlNrc0lHRnVkR2t0YjNabGNteGhjQ3dnWkdWdWMybDBlU3dnYjNKcFpXNTBZWFJwYjI0c0lIVnpaUzFrWlhacFkyVXRkMmxrZEdnc0lHWmhiR3hpWVdOckxXTnNZWE56S1Z4dUlDQWdJSHRpYkc5amEzMWNibHh1WVdKdmRtVWdQU0JtY205dExYZHBaSFJvWEc1Y2JuUnZMWGRwWkhSb0tITmpZV3hsTFhCdmFXNTBMQ0JoYm5ScExXOTJaWEpzWVhBZ1BTQnlkWEIwZFhKbExtRnVkR2t0YjNabGNteGhjQ3dnWkdWdWMybDBlU0E5SUc1MWJHd3NJRzl5YVdWdWRHRjBhVzl1SUQwZ2JuVnNiQ3dnZFhObExXUmxkbWxqWlMxM2FXUjBhQ0E5SUhKMWNIUjFjbVV1ZFhObExXUmxkbWxqWlMxM2FXUjBhQ3dnWm1Gc2JHSmhZMnN0WTJ4aGMzTWdQU0J1ZFd4c0tWeHVJQ0JwWmlBdGFYTXRjM1J5YVc1bktHOXlhV1Z1ZEdGMGFXOXVLVnh1SUNBZ0lHOXlhV1Z1ZEdGMGFXOXVJRDBnWTI5dWRtVnlkQ2h2Y21sbGJuUmhkR2x2YmlsY2JpQWdhV1lnTFdsekxYTjBjbWx1Wnloa1pXNXphWFI1S1Z4dUlDQWdJR1JsYm5OcGRIa2dQU0JqYjI1MlpYSjBLR1JsYm5OcGRIa3BYRzRnSUN0aVpYUjNaV1Z1S0RFc0lITmpZV3hsTFhCdmFXNTBMQ0JoYm5ScExXOTJaWEpzWVhBc0lHUmxibk5wZEhrc0lHOXlhV1Z1ZEdGMGFXOXVMQ0IxYzJVdFpHVjJhV05sTFhkcFpIUm9MQ0JtWVd4c1ltRmpheTFqYkdGemN5bGNiaUFnSUNCN1lteHZZMnQ5WEc1Y2JtSmxiRzkzSUQwZ2RHOHRkMmxrZEdoY2JseHViVzlpYVd4bEtHRnVkR2t0YjNabGNteGhjQ0E5SUhKMWNIUjFjbVV1WVc1MGFTMXZkbVZ5YkdGd0xDQmtaVzV6YVhSNUlEMGdiblZzYkN3Z2IzSnBaVzUwWVhScGIyNGdQU0J1ZFd4c0xDQjFjMlV0WkdWMmFXTmxMWGRwWkhSb0lEMGdjblZ3ZEhWeVpTNTFjMlV0WkdWMmFXTmxMWGRwWkhSb0xDQm1ZV3hzWW1GamF5MWpiR0Z6Y3lBOUlHNTFiR3dwWEc0Z0lHbG1JQzFwY3kxemRISnBibWNvYjNKcFpXNTBZWFJwYjI0cFhHNGdJQ0FnYjNKcFpXNTBZWFJwYjI0Z1BTQmpiMjUyWlhKMEtHOXlhV1Z1ZEdGMGFXOXVLVnh1SUNCcFppQXRhWE10YzNSeWFXNW5LR1JsYm5OcGRIa3BYRzRnSUNBZ1pHVnVjMmwwZVNBOUlHTnZiblpsY25Rb1pHVnVjMmwwZVNsY2JpQWdLMkpsYkc5M0tISjFjSFIxY21VdWJXOWlhV3hsTFdOMWRHOW1aaXdnWVc1MGFTMXZkbVZ5YkdGd0xDQmtaVzV6YVhSNUxDQnZjbWxsYm5SaGRHbHZiaXdnZFhObExXUmxkbWxqWlMxM2FXUjBhQ3dnWm1Gc2JHSmhZMnN0WTJ4aGMzTXBYRzRnSUNBZ2UySnNiMk5yZlZ4dVhHNTBZV0pzWlhRb1lXNTBhUzF2ZG1WeWJHRndJRDBnY25Wd2RIVnlaUzVoYm5ScExXOTJaWEpzWVhBc0lHUmxibk5wZEhrZ1BTQnVkV3hzTENCdmNtbGxiblJoZEdsdmJpQTlJRzUxYkd3c0lIVnpaUzFrWlhacFkyVXRkMmxrZEdnZ1BTQnlkWEIwZFhKbExuVnpaUzFrWlhacFkyVXRkMmxrZEdnc0lHWmhiR3hpWVdOckxXTnNZWE56SUQwZ2JuVnNiQ2xjYmlBZ2FXWWdMV2x6TFhOMGNtbHVaeWh2Y21sbGJuUmhkR2x2YmlsY2JpQWdJQ0J2Y21sbGJuUmhkR2x2YmlBOUlHTnZiblpsY25Rb2IzSnBaVzUwWVhScGIyNHBYRzRnSUdsbUlDMXBjeTF6ZEhKcGJtY29aR1Z1YzJsMGVTbGNiaUFnSUNCa1pXNXphWFI1SUQwZ1kyOXVkbVZ5ZENoa1pXNXphWFI1S1Z4dUlDQXJZbVYwZDJWbGJpaHlkWEIwZFhKbExtMXZZbWxzWlMxamRYUnZabVlzSUhKMWNIUjFjbVV1WkdWemEzUnZjQzFqZFhSdlptWXNJR0Z1ZEdrdGIzWmxjbXhoY0N3Z1pHVnVjMmwwZVN3Z2IzSnBaVzUwWVhScGIyNHNJSFZ6WlMxa1pYWnBZMlV0ZDJsa2RHZ3NJR1poYkd4aVlXTnJMV05zWVhOektWeHVJQ0FnSUh0aWJHOWphMzFjYmx4dVpHVnphM1J2Y0NoaGJuUnBMVzkyWlhKc1lYQWdQU0J5ZFhCMGRYSmxMbUZ1ZEdrdGIzWmxjbXhoY0N3Z1pHVnVjMmwwZVNBOUlHNTFiR3dzSUc5eWFXVnVkR0YwYVc5dUlEMGdiblZzYkN3Z2RYTmxMV1JsZG1salpTMTNhV1IwYUNBOUlISjFjSFIxY21VdWRYTmxMV1JsZG1salpTMTNhV1IwYUN3Z1ptRnNiR0poWTJzdFkyeGhjM01nUFNCdWRXeHNLVnh1SUNCcFppQXRhWE10YzNSeWFXNW5LRzl5YVdWdWRHRjBhVzl1S1Z4dUlDQWdJRzl5YVdWdWRHRjBhVzl1SUQwZ1kyOXVkbVZ5ZENodmNtbGxiblJoZEdsdmJpbGNiaUFnYVdZZ0xXbHpMWE4wY21sdVp5aGtaVzV6YVhSNUtWeHVJQ0FnSUdSbGJuTnBkSGtnUFNCamIyNTJaWEowS0dSbGJuTnBkSGtwWEc0Z0lDdGhZbTkyWlNoeWRYQjBkWEpsTG1SbGMydDBiM0F0WTNWMGIyWm1MQ0JoYm5ScExXOTJaWEpzWVhBc0lHUmxibk5wZEhrc0lHOXlhV1Z1ZEdGMGFXOXVMQ0IxYzJVdFpHVjJhV05sTFhkcFpIUm9MQ0JtWVd4c1ltRmpheTFqYkdGemN5bGNiaUFnSUNCN1lteHZZMnQ5WEc1Y2JtaGtLR0Z1ZEdrdGIzWmxjbXhoY0NBOUlISjFjSFIxY21VdVlXNTBhUzF2ZG1WeWJHRndMQ0JrWlc1emFYUjVJRDBnYm5Wc2JDd2diM0pwWlc1MFlYUnBiMjRnUFNCdWRXeHNMQ0IxYzJVdFpHVjJhV05sTFhkcFpIUm9JRDBnY25Wd2RIVnlaUzUxYzJVdFpHVjJhV05sTFhkcFpIUm9MQ0JtWVd4c1ltRmpheTFqYkdGemN5QTlJRzUxYkd3cFhHNGdJR2xtSUMxcGN5MXpkSEpwYm1jb2IzSnBaVzUwWVhScGIyNHBYRzRnSUNBZ2IzSnBaVzUwWVhScGIyNGdQU0JqYjI1MlpYSjBLRzl5YVdWdWRHRjBhVzl1S1Z4dUlDQnBaaUF0YVhNdGMzUnlhVzVuS0dSbGJuTnBkSGtwWEc0Z0lDQWdaR1Z1YzJsMGVTQTlJR052Ym5abGNuUW9aR1Z1YzJsMGVTbGNiaUFnSzJGaWIzWmxLSEoxY0hSMWNtVXVhR1F0WTNWMGIyWm1MQ0JoYm5ScExXOTJaWEpzWVhBc0lHUmxibk5wZEhrc0lHOXlhV1Z1ZEdGMGFXOXVMQ0IxYzJVdFpHVjJhV05sTFhkcFpIUm9MQ0JtWVd4c1ltRmpheTFqYkdGemN5bGNiaUFnSUNCN1lteHZZMnQ5WEc1Y2JtUmxibk5wZEhrb1pHVnVjMmwwZVN3Z2IzSnBaVzUwWVhScGIyNGdQU0J1ZFd4c0xDQm1ZV3hzWW1GamF5MWpiR0Z6Y3lBOUlHNTFiR3dwWEc0Z0lITmxiR1ZqZEdWa0lEMGdjMlZzWldOMGIzSW9LVnh1SUNCcFppQnViM1FnS0hKMWNIUjFjbVV1Y21GemRHVnlhWE5sTFcxbFpHbGhMWEYxWlhKcFpYTXBYRzRnSUNBZ1kyOXVaR2wwYVc5dWN5QTlJQ2dwWEc0Z0lDQWdabTl5SUhGMVpYSjVJR2x1SUMxa1pXNXphWFI1TFhGMVpYSnBaWE1vWkdWdWMybDBlU2xjYmlBZ0lDQWdJR052Ym1ScGRHbHZiaUE5SUNkdmJteDVJSE5qY21WbGJpQmhibVFnSlhNbklDVWdLSEYxWlhKNUtWeHVJQ0FnSUNBZ2FXWWdiM0pwWlc1MFlYUnBiMjVjYmlBZ0lDQWdJQ0FnWTI5dVpHbDBhVzl1SUQwZ1kyOXVaR2wwYVc5dUlDc2dKeUJoYm1RZ0tHOXlhV1Z1ZEdGMGFXOXVPaUFsY3lrbklDVWdLRzl5YVdWdWRHRjBhVzl1S1Z4dUlDQWdJQ0FnY0hWemFDaGpiMjVrYVhScGIyNXpMQ0JqYjI1a2FYUnBiMjRwWEc0Z0lDQWdZMjl1WkdsMGFXOXVJRDBnYW05cGJpZ25MQ0FuTENCamIyNWthWFJwYjI1ektWeHVJQ0FnSUVCdFpXUnBZU0JqYjI1a2FYUnBiMjVjYmlBZ0lDQWdJSHRpYkc5amEzMWNiaUFnSUNCcFppQm1ZV3hzWW1GamF5MWpiR0Z6YzF4dUlDQWdJQ0FnSzJOeVpXRjBaUzFtWVd4c1ltRmpheTFqYkdGemN5aHpaV3hsWTNSbFpDd2dabUZzYkdKaFkyc3RZMnhoYzNNcFhHNGdJQ0FnSUNBZ0lIdGliRzlqYTMxY2JseHVjR2w0Wld3dGNtRjBhVzhnUFNCa1pXNXphWFI1WEc1Y2JuSmxkR2x1WVNodmNtbGxiblJoZEdsdmJpQTlJRzUxYkd3c0lHWmhiR3hpWVdOckxXTnNZWE56SUQwZ2JuVnNiQ2xjYmlBZ0syUmxibk5wZEhrb0ozSmxkR2x1WVNjc0lHOXlhV1Z1ZEdGMGFXOXVMQ0JtWVd4c1ltRmpheTFqYkdGemN5bGNiaUFnSUNCN1lteHZZMnQ5WEc1Y2JteGhibVJ6WTJGd1pTaGtaVzV6YVhSNUlEMGdiblZzYkN3Z1ptRnNiR0poWTJzdFkyeGhjM01nUFNCdWRXeHNLVnh1SUNCelpXeGxZM1JsWkNBOUlITmxiR1ZqZEc5eUtDbGNiaUFnYVdZZ2JtOTBJQ2h5ZFhCMGRYSmxMbkpoYzNSbGNtbHpaUzF0WldScFlTMXhkV1Z5YVdWektWeHVJQ0FnSUdsbUlDMXBjeTF6ZEhKcGJtY29aR1Z1YzJsMGVTbGNiaUFnSUNBZ0lHUmxibk5wZEhrZ1BTQmpiMjUyWlhKMEtHUmxibk5wZEhrcFhHNGdJQ0FnYVdZZ1pHVnVjMmwwZVZ4dUlDQWdJQ0FnSzNCcGVHVnNMWEpoZEdsdktHUmxibk5wZEhrc0lHOXlhV1Z1ZEdGMGFXOXVPaUJzWVc1a2MyTmhjR1VzSUdaaGJHeGlZV05yTFdOc1lYTnpLVnh1SUNBZ0lDQWdJQ0I3WW14dlkydDlYRzRnSUNBZ1pXeHpaVnh1SUNBZ0lDQWdRRzFsWkdsaElHOXViSGtnYzJOeVpXVnVJR0Z1WkNBb2IzSnBaVzUwWVhScGIyNDZJR3hoYm1SelkyRndaU2xjYmlBZ0lDQWdJQ0FnZTJKc2IyTnJmVnh1SUNBZ0lDQWdhV1lnWm1Gc2JHSmhZMnN0WTJ4aGMzTmNiaUFnSUNBZ0lDQWdLMk55WldGMFpTMW1ZV3hzWW1GamF5MWpiR0Z6Y3loelpXeGxZM1JsWkN3Z1ptRnNiR0poWTJzdFkyeGhjM01wWEc0Z0lDQWdJQ0FnSUNBZ2UySnNiMk5yZlZ4dVhHNXdiM0owY21GcGRDaGtaVzV6YVhSNUlEMGdiblZzYkN3Z1ptRnNiR0poWTJzdFkyeGhjM01nUFNCdWRXeHNLVnh1SUNCelpXeGxZM1JsWkNBOUlITmxiR1ZqZEc5eUtDbGNiaUFnYVdZZ2JtOTBJQ2h5ZFhCMGRYSmxMbkpoYzNSbGNtbHpaUzF0WldScFlTMXhkV1Z5YVdWektWeHVJQ0FnSUdsbUlDMXBjeTF6ZEhKcGJtY29aR1Z1YzJsMGVTbGNiaUFnSUNBZ0lHUmxibk5wZEhrZ1BTQmpiMjUyWlhKMEtHUmxibk5wZEhrcFhHNGdJQ0FnYVdZZ1pHVnVjMmwwZVZ4dUlDQWdJQ0FnSzNCcGVHVnNMWEpoZEdsdktHUmxibk5wZEhrc0lHOXlhV1Z1ZEdGMGFXOXVPaUJ3YjNKMGNtRnBkQ3dnWm1Gc2JHSmhZMnN0WTJ4aGMzTXBYRzRnSUNBZ0lDQWdJSHRpYkc5amEzMWNiaUFnSUNCbGJITmxYRzRnSUNBZ0lDQkFiV1ZrYVdFZ2IyNXNlU0J6WTNKbFpXNGdZVzVrSUNodmNtbGxiblJoZEdsdmJqb2djRzl5ZEhKaGFYUXBYRzRnSUNBZ0lDQWdJSHRpYkc5amEzMWNiaUFnSUNBZ0lHbG1JR1poYkd4aVlXTnJMV05zWVhOelhHNGdJQ0FnSUNBZ0lDdGpjbVZoZEdVdFptRnNiR0poWTJzdFkyeGhjM01vYzJWc1pXTjBaV1FzSUdaaGJHeGlZV05yTFdOc1lYTnpLVnh1SUNBZ0lDQWdJQ0FnSUh0aWJHOWphMzFjYmlJc0lpNTBZV0pjYmx4MGJXbHVMWGRwWkhSb0lEazJNSEI0WEc1Y2RHaGxhV2RvZENBeE1EQjJhRnh1WEhRbU9tNTBhQzFqYUdsc1pDZ3lLVnh1WEhSY2RHSmhZMnRuY205MWJtUWdJekF3TURBd01GeHVYRzRpWFgwPSAqLyIsIi8vIFJlc2V0XG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyBSZXNldCBkZWZhdWx0IHN0eWxlcy5cbipcblx0bWFyZ2luIDBcblx0cGFkZGluZyAwXG5cdGZvbnQgaW5oZXJpdFxuXHRib3gtc2l6aW5nIGJvcmRlci1ib3hcblxuLy8gSFRNTDUgZGlzcGxheSBkZWZpbml0aW9uc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gQ29ycmVjdCBgYmxvY2tgIGRpc3BsYXkgbm90IGRlZmluZWQgaW4gSUUgOC85LlxuYXJ0aWNsZVxuYXNpZGVcbmRldGFpbHNcbmZpZ2NhcHRpb25cbmZpZ3VyZVxuZm9vdGVyXG5oZWFkZXJcbmhncm91cFxubWFpblxubmF2XG5zZWN0aW9uXG5zdW1tYXJ5XG5cdGRpc3BsYXkgYmxvY2tcblxuLy8gMS4gQ29ycmVjdCBgaW5saW5lLWJsb2NrYCBkaXNwbGF5IG5vdCBkZWZpbmVkIGluIElFIDgvOS5cbi8vIDIuIE5vcm1hbGl6ZSB2ZXJ0aWNhbCBhbGlnbm1lbnQgb2YgYHByb2dyZXNzYCBpbiBDaHJvbWUsIEZpcmVmb3gsIGFuZCBPcGVyYS5cbmF1ZGlvXG5jYW52YXNcbnByb2dyZXNzXG52aWRlb1xuXHRkaXNwbGF5IGlubGluZS1ibG9jayAgICAvLyAxXG5cdHZlcnRpY2FsLWFsaWduIGJhc2VsaW5lIC8vIDJcblxuLy8gUHJldmVudCBtb2Rlcm4gYnJvd3NlcnMgZnJvbSBkaXNwbGF5aW5nIGBhdWRpb2Agd2l0aG91dCBjb250cm9scy5cbi8vIFJlbW92ZSBleGNlc3MgaGVpZ2h0IGluIGlPUyA1IGRldmljZXMuXG5hdWRpbzpub3QoW2NvbnRyb2xzXSlcblx0ZGlzcGxheSBub25lXG5cdGhlaWdodCAwXG5cbi8vIEFkZHJlc3MgYFtoaWRkZW5dYCBzdHlsaW5nIG5vdCBwcmVzZW50IGluIElFIDgvOS5cbi8vIEhpZGUgdGhlIGB0ZW1wbGF0ZWAgZWxlbWVudCBpbiBJRSwgU2FmYXJpLCBhbmQgRmlyZWZveCA8IDIyLlxuW2hpZGRlbl1cbnRlbXBsYXRlXG5cdGRpc3BsYXkgbm9uZVxuXG4vLyBCYXNlXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4vLyAxLiBTZXQgZGVmYXVsdCBmb250IGZhbWlseSB0byBzYW5zLXNlcmlmLlxuLy8gMi4gUHJldmVudCBpT1MgdGV4dCBzaXplIGFkanVzdCBhZnRlciBvcmllbnRhdGlvbiBjaGFuZ2UsIHdpdGhvdXQgZGlzYWJsaW5nIHVzZXIgem9vbS5cbi8vIDMuIFJlbW92ZSBoaWdobGl0ZSBvbiBtb2JpbGUgZGV2aWNlcy5cbi8vIDQuIFNldCBkZWZhdWx0IGN1cnNvci5cbmh0bWxcblx0Zm9udC1mYW1pbHkgc2Fucy1zZXJpZiAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gMVxuXHQtbXMtdGV4dC1zaXplLWFkanVzdCAxMDAlICAgICAgICAgICAgICAgICAgICAgICAvLyAyXG5cdC13ZWJraXQtdGV4dC1zaXplLWFkanVzdCAxMDAlICAgICAgICAgICAgICAgICAgIC8vIDJcblx0LXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yIHJnYmEoMCwgMCwgMCwgMCkgICAgLy8gM1xuXHQtd2Via2l0LWZvY3VzLXJpbmctY29sb3IgcmdiYSgyNTUsIDI1NSwgMjU1LCAwKSAvLyAzXG5cdGN1cnNvciBkZWZhdWx0ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIDRcblxuLy8gU2V0IDEwMCUgbGluZS1oZWlnaHRcbmJvZHlcblx0Zm9udC1zaXplIDEwMCVcblx0bGluZS1oZWlnaHQgMVxuXHQtbW96LW9zeC1mb250LXNtb290aGluZyBncmF5c2NhbGVcblx0LXdlYmtpdC1mb250LXNtb290aGluZyBhbnRpYWxpYXNlZFxuXG4vLyBMaW5rc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gUmVtb3ZlIHRoZSBncmF5IGJhY2tncm91bmQgY29sb3IgZnJvbSBhY3RpdmUgbGlua3MgaW4gSUUgMTAuXG5hXG5cdGJhY2tncm91bmQgdHJhbnNwYXJlbnRcblxuLy8gSW1wcm92ZSByZWFkYWJpbGl0eSB3aGVuIGZvY3VzZWQgYW5kIGFsc28gbW91c2UgaG92ZXJlZCBpbiBhbGwgYnJvd3NlcnMuXG4qOmZvY3VzXG4qOmFjdGl2ZVxuKjpob3ZlclxuXHRvdXRsaW5lIDBcblxuLy8gVHlwb2dyYXBoeVxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gQWRkcmVzcyBkaWZmZXJlbmNlcyBiZXR3ZWVuIEZpcmVmb3ggYW5kIG90aGVyIGJyb3dzZXJzLlxuaHJcblx0Ym94LXNpemluZyBjb250ZW50LWJveFxuXHRoZWlnaHQgMFxuXG4vLyBSZW1vdmUgZGVmYXVsdCBzdHlsZVxub2xcbnVsXG5cdGxpc3Qtc3R5bGUgbm9uZVxuXG4vLyBJbXByb3ZlIHJlYWRhYmlsaXR5IG9mIHByZS1mb3JtYXR0ZWQgdGV4dCBpbiBhbGwgYnJvd3NlcnMuXG5wcmVcblx0dGFiLXNpemUgNFxuXHR3aGl0ZS1zcGFjZSBwcmUtd3JhcFxuXG4vLyBTZXQgY29uc2lzdGVudCBxdW90ZSB0eXBlcy5cbnFcblx0cXVvdGVzICdcXDIwMUMnICdcXDIwMUQnICdcXDIwMTgnICdcXDIwMTknXG5cbi8vIEVtYmVkZGVkIGNvbnRlbnRcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIFJlbW92ZSBib3JkZXIgd2hlbiBpbnNpZGUgYGFgIGVsZW1lbnQgaW4gSUUgOC85LzEwLlxuaW1nXG5cdGJvcmRlciAwXG5cbi8vIENvcnJlY3Qgb3ZlcmZsb3cgZGlzcGxheWVkIG9kZGx5IGluIElFIDkuXG5zdmc6bm90KDpyb290KVxuXHRvdmVyZmxvdyBoaWRkZW5cblxuLy8gRm9ybXNcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbi8vIEFkZHJlc3MgRmlyZWZveCA0KyBzZXR0aW5nIGBsaW5lLWhlaWdodGAgb24gYGlucHV0YCB1c2luZyBgIWltcG9ydGFudGAgaW4gdGhlIFVBIHN0eWxlc2hlZXQuXG5idXR0b25cbmlucHV0XG5cdGxpbmUtaGVpZ2h0IG5vcm1hbFxuXG4vLyBBZGRyZXNzIGluY29uc2lzdGVudCBgdGV4dC10cmFuc2Zvcm1gIGluaGVyaXRhbmNlIGZvciBgYnV0dG9uYCBhbmQgYHNlbGVjdGAuXG4vLyBBbGwgb3RoZXIgZm9ybSBjb250cm9sIGVsZW1lbnRzIGRvIG5vdCBpbmhlcml0IGB0ZXh0LXRyYW5zZm9ybWAgdmFsdWVzLlxuLy8gQ29ycmVjdCBgYnV0dG9uYCBzdHlsZSBpbmhlcml0YW5jZSBpbiBDaHJvbWUsIFNhZmFyaSA1KywgYW5kIElFIDgrLlxuLy8gQ29ycmVjdCBgc2VsZWN0YCBzdHlsZSBpbmhlcml0YW5jZSBpbiBGaXJlZm94IDQrIGFuZCBPcGVyYS5cbmJ1dHRvblxuc2VsZWN0XG5cdHRleHQtdHJhbnNmb3JtIG5vbmVcblxuLy8gQWRkcmVzcyBgb3ZlcmZsb3dgIHNldCB0byBgaGlkZGVuYCBpbiBJRSA4LzkvMTAuXG5idXR0b25cblx0b3ZlcmZsb3cgdmlzaWJsZVxuXG4vLyAxLiBBdm9pZCB0aGUgV2ViS2l0IGJ1ZyBpbiBBbmRyb2lkIDQuMC4qIHdoZXJlICgyKSBkZXN0cm95cyBuYXRpdmUgYGF1ZGlvYCBhbmQgYHZpZGVvYCBjb250cm9scy5cbi8vIDIuIENvcnJlY3QgaW5hYmlsaXR5IHRvIHN0eWxlIGNsaWNrYWJsZSBgaW5wdXRgIHR5cGVzIGluIGlPUy5cbi8vIDMuIEltcHJvdmUgdXNhYmlsaXR5IGFuZCBjb25zaXN0ZW5jeSBvZiBjdXJzb3Igc3R5bGUgYmV0d2VlbiBpbWFnZS10eXBlIGBpbnB1dGAgYW5kIG90aGVycy5cbmJ1dHRvblxuaHRtbCBpbnB1dFt0eXBlPVwiYnV0dG9uXCJdICAgICAvLyAxXG5pbnB1dFt0eXBlPVwicmVzZXRcIl1cbmlucHV0W3R5cGU9XCJzdWJtaXRcIl1cblx0LXdlYmtpdC1hcHBlYXJhbmNlIGJ1dHRvbiAvLyAyXG5cdGN1cnNvciBwb2ludGVyICAgICAgICAgICAgLy8gM1xuXG4vLyBSZS1zZXQgZGVmYXVsdCBjdXJzb3IgZm9yIGRpc2FibGVkIGVsZW1lbnRzLlxuYnV0dG9uW2Rpc2FibGVkXVxuaHRtbCBpbnB1dFtkaXNhYmxlZF1cblx0Y3Vyc29yIGRlZmF1bHRcblxuLy8gQWRkcmVzcyBib3ggc2l6aW5nIHNldCB0byBgY29udGVudC1ib3hgIGluIElFIDgvOS5cbmlucHV0W3R5cGU9XCJjaGVja2JveFwiXVxuaW5wdXRbdHlwZT1cInJhZGlvXCJdXG5cdGJveC1zaXppbmcgYm9yZGVyLWJveFxuXG4vLyBGaXggdGhlIGN1cnNvciBzdHlsZSBmb3IgQ2hyb21lJ3MgaW5jcmVtZW50L2RlY3JlbWVudCBidXR0b25zLiBGb3IgY2VydGFpblxuLy8gYGZvbnQtc2l6ZWAgdmFsdWVzIG9mIHRoZSBgaW5wdXRgLCBpdCBjYXVzZXMgdGhlIGN1cnNvciBzdHlsZSBvZiB0aGVcbi8vIGRlY3JlbWVudCBidXR0b24gdG8gY2hhbmdlIGZyb20gYGRlZmF1bHRgIHRvIGB0ZXh0YC5cbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtaW5uZXItc3Bpbi1idXR0b25cbmlucHV0W3R5cGU9XCJudW1iZXJcIl06Oi13ZWJraXQtb3V0ZXItc3Bpbi1idXR0b25cblx0aGVpZ2h0IGF1dG9cblxuLy8gMS4gQWRkcmVzcyBgYXBwZWFyYW5jZWAgc2V0IHRvIGBzZWFyY2hmaWVsZGAgaW4gU2FmYXJpIDUgYW5kIENocm9tZS5cbi8vIDIuIEFkZHJlc3MgYGJveC1zaXppbmdgIHNldCB0byBgYm9yZGVyLWJveGAgaW4gU2FmYXJpIDUgYW5kIENocm9tZSAoaW5jbHVkZSBgLW1vemAgdG8gZnV0dXJlLXByb29mKS5cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl1cblx0LXdlYmtpdC1hcHBlYXJhbmNlIHRleHRmaWVsZCAvLyAxXG5cdGJveC1zaXppbmcgY29udGVudC1ib3hcblxuLy8gUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIHNlYXJjaCBjYW5jZWwgYnV0dG9uIGluIFNhZmFyaSA1IGFuZCBDaHJvbWUgb24gT1MgWC5cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWNhbmNlbC1idXR0b25cbmlucHV0W3R5cGU9XCJzZWFyY2hcIl06Oi13ZWJraXQtc2VhcmNoLWRlY29yYXRpb25cblx0LXdlYmtpdC1hcHBlYXJhbmNlIG5vbmVcblxuLy8gUmVtb3ZlIGlubmVyIHBhZGRpbmcgYW5kIGJvcmRlciBpbiBGaXJlZm94IDQrLlxuYnV0dG9uOjotbW96LWZvY3VzLWlubmVyXG5pbnB1dDo6LW1vei1mb2N1cy1pbm5lclxuXHRib3JkZXIgMFxuXHRwYWRkaW5nIDBcblxuLy8gMS4gUmVtb3ZlIGRlZmF1bHQgdmVydGljYWwgc2Nyb2xsYmFyIGluIElFIDgvOS5cbi8vIDIuIEltcHJvdmUgcmVhZGFiaWxpdHkgYW5kIGFsaWdubWVudCBpbiBhbGwgYnJvd3NlcnMuXG50ZXh0YXJlYVxuXHRvdmVyZmxvdyBhdXRvICAgICAgLy8gMVxuXHR2ZXJ0aWNhbC1hbGlnbiB0b3AgLy8gMlxuXG4vLyBSZXNldCB1bnVzdWFsIEZpcmVmb3gtb24tQW5kcm9pZCBkZWZhdWx0IHN0eWxlLlxuYnV0dG9uXG5pbnB1dFxuc2VsZWN0W211bHRpcGxlXVxudGV4dGFyZWFcblx0YmFja2dyb3VuZC1pbWFnZSBub25lXG5cbi8vIDEuIFJlbW92ZSBgYm9yZGVyLXJhZGl1c2AgaW4gaU9TLlxuLy8gMi4gUmVtb3ZlIGBib3gtc2hhZG93YCBpbiBpT1MuXG5pbnB1dFxuc2VsZWN0XG50ZXh0YXJlYVxuXHRib3JkZXItcmFkaXVzIDAgLy8gMVxuXHRib3gtc2hhZG93IG5vbmUgLy8gMlxuXG4vLyAxLiBEaXNhYmxlIHJlc2l6ZS5cbi8vIDIuIEFsbG93IHVzZXIgc2VsZWN0LlxuaW5wdXRcbnRleHRhcmVhXG5cdHJlc2l6ZSBub25lICAgICAgLy8gMVxuXHR1c2VyLXNlbGVjdCB0ZXh0IC8vIDJcblxuLy8gSGlkZSBwbGFjZWhvbGRlciBvbiBmb2N1cy5cbltwbGFjZWhvbGRlcl06Zm9jdXM6OnBsYWNlaG9sZGVyXG5cdGNvbG9yIHRyYW5zcGFyZW50XG5cbi8vIFRhYmxlc1xuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuLy8gUmVtb3ZlIG1vc3Qgc3BhY2luZyBiZXR3ZWVuIHRhYmxlIGNlbGxzLlxudGFibGVcblx0Ym9yZGVyLWNvbGxhcHNlIGNvbGxhcHNlXG5cdGJvcmRlci1zcGFjaW5nIDBcbiIsIi5mb3JrXG5cdCY6OnNlbGVjdGlvblxuXHRcdGJhY2tncm91bmQtY29sb3IgdHJhbnNwYXJlbnRcblxuXHQrZnJvbS13aWR0aCg1NDFweClcblx0XHRwb3NpdGlvbiBhYnNvbHV0ZVxuXHRcdHRvcCAwXG5cdFx0cmlnaHQgMFxuXHRcdGRpc3BsYXkgYmxvY2tcblx0XHRoZWlnaHQgMjAwcHhcblx0XHR3aWR0aCAyMDBweFxuXHRcdG92ZXJmbG93IGhpZGRlblxuXG5cdCZfX2xpbmtcblx0XHRkaXNwbGF5IGJsb2NrXG5cdFx0cGFkZGluZyA1cHggNDBweFxuXHRcdGZvbnQgYm9sZCAxcmVtLzJyZW0gYXJpYWwsIHNhbnMtc2VyaWZcblx0XHRmb250LXdlaWdodCBib2xkXG5cdFx0dGV4dC1hbGlnbiBjZW50ZXJcblx0XHR0ZXh0LWRlY29yYXRpb24gbm9uZVxuXHRcdHRyYW5zaXRpb24gYmFja2dyb3VuZCAuMjVzIGVhc2Utb3V0LCBjb2xvciAuMjVzIGVhc2Utb3V0XG5cblx0XHQrdG8td2lkdGgoNTQwcHgpXG5cdFx0XHRtYXJnaW4tdG9wIDQwcHhcblx0XHRcdGNvbG9yICNlNzRjM2Ncblx0XHRcdGJvcmRlci1yYWRpdXMgNHB4XG5cblx0XHRcdCY6YWN0aXZlXG5cdFx0XHRcdHRyYW5zZm9ybSBzY2FsZSguOTc1KVxuXG5cdFx0K2Zyb20td2lkdGgoNTQxcHgpXG5cdFx0XHRwb3NpdGlvbiBhYnNvbHV0ZVxuXHRcdFx0dG9wIDUwcHhcblx0XHRcdHJpZ2h0IC01NHB4XG5cdFx0XHR3aWR0aCAyNTBweFxuXHRcdFx0Y29sb3IgI2ZmZlxuXHRcdFx0YmFja2dyb3VuZC1jb2xvciAjMjIyXG5cdFx0XHRiYWNrZ3JvdW5kLWltYWdlIHVybCguLi9pbWFnZXMvdmVydGljYWwtY2xvdGgucG5nKVxuXHRcdFx0Ym94LXNoYWRvdyAwIDAgOHB4IHJnYmEoMCwgMCwgMCwgLjUpXG5cdFx0XHR0cmFuc2Zvcm0gcm90YXRlKDQ1ZGVnKVxuXG5cdFx0XHQmOmJlZm9yZVxuXHRcdFx0JjphZnRlclxuXHRcdFx0XHRwb3NpdGlvbiBhYnNvbHV0ZVxuXHRcdFx0XHR0b3AgMXB4XG5cdFx0XHRcdGxlZnQgMFxuXHRcdFx0XHRkaXNwbGF5IGJsb2NrXG5cdFx0XHRcdHdpZHRoIDEwMCVcblx0XHRcdFx0aGVpZ2h0IDFweFxuXHRcdFx0XHRiYWNrZ3JvdW5kLWNvbG9yICNmZmZcblx0XHRcdFx0Y29udGVudCAnJ1xuXG5cdFx0XHQmOmFmdGVyXG5cdFx0XHRcdHRvcCBhdXRvXG5cdFx0XHRcdGJvdHRvbSAxcHhcblxuXHRcdCY6aG92ZXJcblx0XHRcdGNvbG9yICNmZmZcblx0XHRcdGJhY2tncm91bmQtY29sb3IgI2U3NGMzY1xuXHRcdFx0YmFja2dyb3VuZC1pbWFnZSBub25lXG4iLCJiYXNlLWZvbnQtc2l6ZSA/PSAxNnB4XG5yYXN0ZXJpc2UtbWVkaWEtcXVlcmllcyA/PSBmYWxzZVxuXG5ydXB0dXJlID0ge1xuICByYXN0ZXJpc2UtbWVkaWEtcXVlcmllczogcmFzdGVyaXNlLW1lZGlhLXF1ZXJpZXNcbiAgbW9iaWxlLWN1dG9mZjogNDAwcHhcbiAgZGVza3RvcC1jdXRvZmY6IDEwNTBweFxuICBoZC1jdXRvZmY6IDE4MDBweFxuICBlbmFibGUtZW0tYnJlYWtwb2ludHM6IGZhbHNlXG4gIGJhc2UtZm9udC1zaXplOiBiYXNlLWZvbnQtc2l6ZVxuICBhbnRpLW92ZXJsYXA6IGZhbHNlXG4gIGRlbnNpdHktcXVlcmllczogJ2RwcHgnICd3ZWJraXQnICdtb3onICdkcGknXG4gIHJldGluYS1kZW5zaXR5OiAxLjVcbiAgdXNlLWRldmljZS13aWR0aDogZmFsc2Vcbn1cbnJ1cHR1cmUuc2NhbGUgPSAwIChydXB0dXJlLm1vYmlsZS1jdXRvZmYpIDYwMHB4IDgwMHB4IChydXB0dXJlLmRlc2t0b3AtY3V0b2ZmKSAocnVwdHVyZS5oZC1jdXRvZmYpXG5ydXB0dXJlLnNjYWxlLW5hbWVzID0gJ3hzJyAncycgJ20nICdsJyAneGwnICdoZCdcblxuLWlzLXN0cmluZyh2YWwpXG4gIGlmIHR5cGVvZih2YWwpIGlzIG5vdCAndW5pdCdcbiAgICBpZiB2YWwgaXMgYSAnc3RyaW5nJyBvciB2YWwgaXMgYSAnaWRlbnQnXG4gICAgICB0cnVlXG4gICAgZWxzZVxuICAgICAgZmFsc2VcbiAgZWxzZVxuICAgIGZhbHNlXG5cbi1nZXQtc2NhbGUtbnVtYmVyKHNjYWxlLW5hbWUpXG4gIGZvciBsaXN0LWl0ZW0sIGkgaW4gcnVwdHVyZS5zY2FsZS1uYW1lc1xuICAgIGlmIGxpc3QtaXRlbSBpcyBzY2FsZS1uYW1lXG4gICAgICByZXR1cm4gaSArIDFcbiAgcmV0dXJuIGZhbHNlXG5cbi1jb252ZXJ0LXRvKHRvLXVuaXQsIHZhbHVlLCBjb250ZXh0ID0gcnVwdHVyZS5iYXNlLWZvbnQtc2l6ZSlcbiAgZnJvbS11bml0ID0gdW5pdCh2YWx1ZSlcbiAgcmV0dXJuIHZhbHVlIGlmIHRvLXVuaXQgaXMgZnJvbS11bml0XG4gIGlmIHRvLXVuaXQgaW4gKCdlbScgJ3JlbScpXG4gICAgcmV0dXJuIHZhbHVlIGlmIGZyb20tdW5pdCBpbiAoJ2VtJyAncmVtJylcbiAgICByZXR1cm4gdW5pdCgodmFsdWUgLyBjb250ZXh0KSwgdG8tdW5pdClcbiAgaWYgdG8tdW5pdCBpcyAncHgnXG4gICAgcmV0dXJuIHVuaXQoKHZhbHVlICogY29udGV4dCksICdweCcpXG5cbi1vbi1zY2FsZShuKVxuICByZXR1cm4gdW5pdChuKSBpcyAnJ1xuXG4tbGFyZ2VyLXRoYW4tc2NhbGUobilcbiAgcmV0dXJuIChuID4gKGxlbmd0aChydXB0dXJlLnNjYWxlKSAtIDEpKSBhbmQgLW9uLXNjYWxlKG4pXG5cbi1pcy16ZXJvKG4pXG4gIHJldHVybiBuIGlzIDBcblxuLW92ZXJsYXAtc2hpZnQoYW50aS1vdmVybGFwLCBuKVxuICBzaGlmdC11bml0ID0gdW5pdChuKVxuICBhbnRpLW92ZXJsYXAgPSAwcHggdW5sZXNzIGFudGktb3ZlcmxhcFxuICBhbnRpLW92ZXJsYXAgPSAxcHggaWYgYW50aS1vdmVybGFwIGlzIHRydWVcbiAgaWYgbGVuZ3RoKGFudGktb3ZlcmxhcCkgaXMgMVxuICAgIHJldHVybiAtY29udmVydC10byhzaGlmdC11bml0LCBhbnRpLW92ZXJsYXApXG4gIGZvciB2YWwgaW4gYW50aS1vdmVybGFwXG4gICAgcmV0dXJuIHZhbCBpZiB1bml0KHZhbCkgaXMgc2hpZnQtdW5pdFxuXG4tYWRqdXN0LW92ZXJsYXAoYW50aS1vdmVybGFwLCBuLCBzaWRlID0gJ21pbicpXG4gIC1zaGlmdCA9IC1vdmVybGFwLXNoaWZ0KGFudGktb3ZlcmxhcCwgbilcbiAgaWYgKHNpZGUgaXMgJ21pbicgYW5kIC1zaGlmdCA+IDApIG9yIChzaWRlIGlzICdtYXgnIGFuZCAtc2hpZnQgPCAwKVxuICAgIG4gPSBuICsgLXNoaWZ0XG4gIHJldHVybiBuXG5cbi1pcy1wb3NpdGl2ZShuKVxuICByZXR1cm4gbiA+PSAwXG5cbi1kZW5zaXR5LXF1ZXJpZXMoZGVuc2l0eSlcbiAgaWYgdHlwZW9mKGRlbnNpdHkpIGlzIG5vdCAndW5pdCdcbiAgICBpZiBub3QgLWlzLXN0cmluZyhkZW5zaXR5KVxuICAgICAgZGVuc2l0eSA9ICclcycgJSBkZW5zaXR5XG4gIGRlbnNpdHkgPSBydXB0dXJlLnJldGluYS1kZW5zaXR5IGlmIGRlbnNpdHkgaXMgJ3JldGluYSdcbiAgcXVlcmllcyA9ICgpXG4gIGZvciBxdWVyeSBpbiBydXB0dXJlLmRlbnNpdHktcXVlcmllc1xuICAgIGlmIHF1ZXJ5IGlzICd3ZWJraXQnXG4gICAgICBwdXNoKHF1ZXJpZXMsICcoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAlcyknICUgKGRlbnNpdHkpKVxuICAgIGVsc2UgaWYgcXVlcnkgaXMgJ21veidcbiAgICAgIHB1c2gocXVlcmllcywgJyhtaW4tLW1vei1kZXZpY2UtcGl4ZWwtcmF0aW86ICVzKScgJSAoZGVuc2l0eSkpXG4gICAgZWxzZSBpZiBxdWVyeSBpcyAnbydcbiAgICAgIHB1c2gocXVlcmllcywgJygtby1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAlcy8xKScgJSAoZGVuc2l0eSkpXG4gICAgZWxzZSBpZiBxdWVyeSBpcyAncmF0aW8nXG4gICAgICBwdXNoKHF1ZXJpZXMsICcobWluLWRldmljZS1waXhlbC1yYXRpbzogJXMpJyAlIChkZW5zaXR5KSlcbiAgICBlbHNlIGlmIHF1ZXJ5IGlzICdkcGknXG4gICAgICBpZiAtaXMtc3RyaW5nKGRlbnNpdHkpXG4gICAgICAgIGRlbnNpdHk9Y29udmVydChkZW5zaXR5KVxuICAgICAgcHVzaChxdWVyaWVzLCAnKG1pbi1yZXNvbHV0aW9uOiAlc2RwaSknICUgKHJvdW5kKGRlbnNpdHkgKiA5NiwgMSkpKVxuICAgIGVsc2UgaWYgcXVlcnkgaXMgJ2RwcHgnXG4gICAgICBwdXNoKHF1ZXJpZXMsICcobWluLXJlc29sdXRpb246ICVzZHBweCknICUgKGRlbnNpdHkpKVxuICByZXR1cm4gcXVlcmllc1xuXG5jcmVhdGUtZmFsbGJhY2stY2xhc3Moc2VsZWN0ZWQsIGNsYXNzKVxuICAveycnICsgY2xhc3MgKyAnICcgKyBzZWxlY3RlZH1cbiAgICB7YmxvY2t9XG5cbi8vICtiZXR3ZWVuKG1pbiwgbWF4KVxuLy8gdXNhZ2UgKHNjYWxlIGNhbiBiZSBtaXhlZCB3aXRoIGN1c3RvbSB2YWx1ZXMpOlxuLy8gICAtICtiZXR3ZWVuKDEsIDMpIHNjYWxlOnNjYWxlXG4vLyAgIC0gK2JldHdlZW4oMCwgMykgMCB3aWR0aDpzY2FsZVxuLy8gICAtICtiZXR3ZWVuKDIwMHB4LCA1MDBweCkgY3VzdG9tOmN1c3RvbVxuLy8gICAtICtiZXR3ZWVuKDAsIDMwMHB4KSAwIHdpZHRoOmN1c3RvbVxuLy8gICAtICtiZXR3ZWVuKDEsIDMwMHB4KSBzY2FsZTpjdXN0b21cbi8vICAgLSArYmV0d2VlbigyMDBweCwgNCkgY3VzdG9tOnNjYWxlXG5cbmJldHdlZW4obWluLCBtYXgsIGFudGktb3ZlcmxhcCA9IHJ1cHR1cmUuYW50aS1vdmVybGFwLCBkZW5zaXR5ID0gbnVsbCwgb3JpZW50YXRpb24gPSBudWxsLCB1c2UtZGV2aWNlLXdpZHRoID0gcnVwdHVyZS51c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcyA9IG51bGwpXG4gIHNlbGVjdGVkID0gc2VsZWN0b3IoKVxuXG4gIGlmIC1pcy1zdHJpbmcob3JpZW50YXRpb24pXG4gICAgb3JpZW50YXRpb24gPSBjb252ZXJ0KG9yaWVudGF0aW9uKVxuICBpZiAtaXMtc3RyaW5nKGRlbnNpdHkpXG4gICAgZGVuc2l0eSA9IGNvbnZlcnQoZGVuc2l0eSlcbiAgaWYgLWlzLXN0cmluZyhtaW4pXG4gICAgbWluID0gLWdldC1zY2FsZS1udW1iZXIobWluKVxuICBpZiAtaXMtc3RyaW5nKG1heClcbiAgICBtYXggPSAtZ2V0LXNjYWxlLW51bWJlcihtYXgpXG5cbiAgLW1pbiA9IHJ1cHR1cmUuc2NhbGVbbWluIC0gMV0gdW5sZXNzIC1pcy16ZXJvKG1pbikgb3IgKG5vdCAtb24tc2NhbGUobWluKSlcbiAgLW1heCA9IHJ1cHR1cmUuc2NhbGVbbWF4XSB1bmxlc3Mgbm90IC1vbi1zY2FsZShtYXgpXG4gIC1taW4gPz0gbWluXG4gIC1tYXggPz0gbWF4XG5cbiAgaWYgKHJ1cHR1cmUucmFzdGVyaXNlLW1lZGlhLXF1ZXJpZXMpXG4gICAgaWYgbm90IChkZW5zaXR5IG9yIC1tYXggb3Igb3JpZW50YXRpb24pXG4gICAgICB7YmxvY2t9XG4gIGVsc2VcbiAgICBjb25kaXRpb24gPSAnb25seSBzY3JlZW4nXG4gICAgdXNlLWRldmljZS13aWR0aCA9IHVzZS1kZXZpY2Utd2lkdGggPyAnZGV2aWNlLScgOiAnJ1xuICAgIHVubGVzcyAtbWluIGlzIDBcbiAgICAgIC1taW4gPSAtY29udmVydC10bygnZW0nLCAtbWluKSBpZiBydXB0dXJlLmVuYWJsZS1lbS1icmVha3BvaW50c1xuICAgICAgLW1pbiA9IC1hZGp1c3Qtb3ZlcmxhcChhbnRpLW92ZXJsYXAsIC1taW4sIHNpZGU6ICdtaW4nKVxuICAgICAgY29uZGl0aW9uID0gY29uZGl0aW9uICsgJyBhbmQgKG1pbi0nICsgdXNlLWRldmljZS13aWR0aCArICd3aWR0aDogJXMpJyAlICgtbWluKVxuICAgIHVubGVzcyAtbGFyZ2VyLXRoYW4tc2NhbGUobWF4KVxuICAgICAgLW1heCA9IC1jb252ZXJ0LXRvKCdlbScsIC1tYXgpIGlmIHJ1cHR1cmUuZW5hYmxlLWVtLWJyZWFrcG9pbnRzXG4gICAgICAtbWF4ID0gLWFkanVzdC1vdmVybGFwKGFudGktb3ZlcmxhcCwgLW1heCwgc2lkZTogJ21heCcpXG4gICAgICBjb25kaXRpb24gPSBjb25kaXRpb24gKyAnIGFuZCAobWF4LScgKyB1c2UtZGV2aWNlLXdpZHRoICsgJ3dpZHRoOiAlcyknICUgKC1tYXgpXG4gICAgaWYgb3JpZW50YXRpb25cbiAgICAgIGNvbmRpdGlvbiA9IGNvbmRpdGlvbiArICcgYW5kIChvcmllbnRhdGlvbjogJXMpJyAlIChvcmllbnRhdGlvbilcbiAgICBpZiBkZW5zaXR5XG4gICAgICBjb25kaXRpb25zID0gKClcbiAgICAgIGZvciBxdWVyeSBpbiAtZGVuc2l0eS1xdWVyaWVzKGRlbnNpdHkpXG4gICAgICAgIHB1c2goY29uZGl0aW9ucywgY29uZGl0aW9uICsgJyBhbmQgJXMnICUgKHF1ZXJ5KSlcbiAgICAgIGNvbmRpdGlvbiA9IGpvaW4oJywgJywgY29uZGl0aW9ucylcbiAgICBAbWVkaWEgY29uZGl0aW9uXG4gICAgICB7YmxvY2t9XG4gIGlmIGZhbGxiYWNrLWNsYXNzXG4gICAgK2NyZWF0ZS1mYWxsYmFjay1jbGFzcyhzZWxlY3RlZCwgZmFsbGJhY2stY2xhc3MpXG4gICAgICB7YmxvY2t9XG5cbmF0KHNjYWxlLXBvaW50LCBhbnRpLW92ZXJsYXAgPSBydXB0dXJlLmFudGktb3ZlcmxhcCwgZGVuc2l0eSA9IG51bGwsIG9yaWVudGF0aW9uID0gbnVsbCwgdXNlLWRldmljZS13aWR0aCA9IHJ1cHR1cmUudXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBpZiAtaXMtc3RyaW5nKG9yaWVudGF0aW9uKVxuICAgIG9yaWVudGF0aW9uID0gY29udmVydChvcmllbnRhdGlvbilcbiAgaWYgLWlzLXN0cmluZyhkZW5zaXR5KVxuICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICtiZXR3ZWVuKHNjYWxlLXBvaW50LCBzY2FsZS1wb2ludCwgYW50aS1vdmVybGFwLCBkZW5zaXR5LCBvcmllbnRhdGlvbiwgdXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MpXG4gICAge2Jsb2NrfVxuXG5mcm9tLXdpZHRoKHNjYWxlLXBvaW50LCBhbnRpLW92ZXJsYXAgPSBydXB0dXJlLmFudGktb3ZlcmxhcCwgZGVuc2l0eSA9IG51bGwsIG9yaWVudGF0aW9uID0gbnVsbCwgdXNlLWRldmljZS13aWR0aCA9IHJ1cHR1cmUudXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBpZiAtaXMtc3RyaW5nKG9yaWVudGF0aW9uKVxuICAgIG9yaWVudGF0aW9uID0gY29udmVydChvcmllbnRhdGlvbilcbiAgaWYgLWlzLXN0cmluZyhkZW5zaXR5KVxuICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICtiZXR3ZWVuKHNjYWxlLXBvaW50LCBsZW5ndGgocnVwdHVyZS5zY2FsZSksIGFudGktb3ZlcmxhcCwgZGVuc2l0eSwgb3JpZW50YXRpb24sIHVzZS1kZXZpY2Utd2lkdGgsIGZhbGxiYWNrLWNsYXNzKVxuICAgIHtibG9ja31cblxuYWJvdmUgPSBmcm9tLXdpZHRoXG5cbnRvLXdpZHRoKHNjYWxlLXBvaW50LCBhbnRpLW92ZXJsYXAgPSBydXB0dXJlLmFudGktb3ZlcmxhcCwgZGVuc2l0eSA9IG51bGwsIG9yaWVudGF0aW9uID0gbnVsbCwgdXNlLWRldmljZS13aWR0aCA9IHJ1cHR1cmUudXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBpZiAtaXMtc3RyaW5nKG9yaWVudGF0aW9uKVxuICAgIG9yaWVudGF0aW9uID0gY29udmVydChvcmllbnRhdGlvbilcbiAgaWYgLWlzLXN0cmluZyhkZW5zaXR5KVxuICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICtiZXR3ZWVuKDEsIHNjYWxlLXBvaW50LCBhbnRpLW92ZXJsYXAsIGRlbnNpdHksIG9yaWVudGF0aW9uLCB1c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcylcbiAgICB7YmxvY2t9XG5cbmJlbG93ID0gdG8td2lkdGhcblxubW9iaWxlKGFudGktb3ZlcmxhcCA9IHJ1cHR1cmUuYW50aS1vdmVybGFwLCBkZW5zaXR5ID0gbnVsbCwgb3JpZW50YXRpb24gPSBudWxsLCB1c2UtZGV2aWNlLXdpZHRoID0gcnVwdHVyZS51c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcyA9IG51bGwpXG4gIGlmIC1pcy1zdHJpbmcob3JpZW50YXRpb24pXG4gICAgb3JpZW50YXRpb24gPSBjb252ZXJ0KG9yaWVudGF0aW9uKVxuICBpZiAtaXMtc3RyaW5nKGRlbnNpdHkpXG4gICAgZGVuc2l0eSA9IGNvbnZlcnQoZGVuc2l0eSlcbiAgK2JlbG93KHJ1cHR1cmUubW9iaWxlLWN1dG9mZiwgYW50aS1vdmVybGFwLCBkZW5zaXR5LCBvcmllbnRhdGlvbiwgdXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MpXG4gICAge2Jsb2NrfVxuXG50YWJsZXQoYW50aS1vdmVybGFwID0gcnVwdHVyZS5hbnRpLW92ZXJsYXAsIGRlbnNpdHkgPSBudWxsLCBvcmllbnRhdGlvbiA9IG51bGwsIHVzZS1kZXZpY2Utd2lkdGggPSBydXB0dXJlLnVzZS1kZXZpY2Utd2lkdGgsIGZhbGxiYWNrLWNsYXNzID0gbnVsbClcbiAgaWYgLWlzLXN0cmluZyhvcmllbnRhdGlvbilcbiAgICBvcmllbnRhdGlvbiA9IGNvbnZlcnQob3JpZW50YXRpb24pXG4gIGlmIC1pcy1zdHJpbmcoZGVuc2l0eSlcbiAgICBkZW5zaXR5ID0gY29udmVydChkZW5zaXR5KVxuICArYmV0d2VlbihydXB0dXJlLm1vYmlsZS1jdXRvZmYsIHJ1cHR1cmUuZGVza3RvcC1jdXRvZmYsIGFudGktb3ZlcmxhcCwgZGVuc2l0eSwgb3JpZW50YXRpb24sIHVzZS1kZXZpY2Utd2lkdGgsIGZhbGxiYWNrLWNsYXNzKVxuICAgIHtibG9ja31cblxuZGVza3RvcChhbnRpLW92ZXJsYXAgPSBydXB0dXJlLmFudGktb3ZlcmxhcCwgZGVuc2l0eSA9IG51bGwsIG9yaWVudGF0aW9uID0gbnVsbCwgdXNlLWRldmljZS13aWR0aCA9IHJ1cHR1cmUudXNlLWRldmljZS13aWR0aCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBpZiAtaXMtc3RyaW5nKG9yaWVudGF0aW9uKVxuICAgIG9yaWVudGF0aW9uID0gY29udmVydChvcmllbnRhdGlvbilcbiAgaWYgLWlzLXN0cmluZyhkZW5zaXR5KVxuICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICthYm92ZShydXB0dXJlLmRlc2t0b3AtY3V0b2ZmLCBhbnRpLW92ZXJsYXAsIGRlbnNpdHksIG9yaWVudGF0aW9uLCB1c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcylcbiAgICB7YmxvY2t9XG5cbmhkKGFudGktb3ZlcmxhcCA9IHJ1cHR1cmUuYW50aS1vdmVybGFwLCBkZW5zaXR5ID0gbnVsbCwgb3JpZW50YXRpb24gPSBudWxsLCB1c2UtZGV2aWNlLXdpZHRoID0gcnVwdHVyZS51c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcyA9IG51bGwpXG4gIGlmIC1pcy1zdHJpbmcob3JpZW50YXRpb24pXG4gICAgb3JpZW50YXRpb24gPSBjb252ZXJ0KG9yaWVudGF0aW9uKVxuICBpZiAtaXMtc3RyaW5nKGRlbnNpdHkpXG4gICAgZGVuc2l0eSA9IGNvbnZlcnQoZGVuc2l0eSlcbiAgK2Fib3ZlKHJ1cHR1cmUuaGQtY3V0b2ZmLCBhbnRpLW92ZXJsYXAsIGRlbnNpdHksIG9yaWVudGF0aW9uLCB1c2UtZGV2aWNlLXdpZHRoLCBmYWxsYmFjay1jbGFzcylcbiAgICB7YmxvY2t9XG5cbmRlbnNpdHkoZGVuc2l0eSwgb3JpZW50YXRpb24gPSBudWxsLCBmYWxsYmFjay1jbGFzcyA9IG51bGwpXG4gIHNlbGVjdGVkID0gc2VsZWN0b3IoKVxuICBpZiBub3QgKHJ1cHR1cmUucmFzdGVyaXNlLW1lZGlhLXF1ZXJpZXMpXG4gICAgY29uZGl0aW9ucyA9ICgpXG4gICAgZm9yIHF1ZXJ5IGluIC1kZW5zaXR5LXF1ZXJpZXMoZGVuc2l0eSlcbiAgICAgIGNvbmRpdGlvbiA9ICdvbmx5IHNjcmVlbiBhbmQgJXMnICUgKHF1ZXJ5KVxuICAgICAgaWYgb3JpZW50YXRpb25cbiAgICAgICAgY29uZGl0aW9uID0gY29uZGl0aW9uICsgJyBhbmQgKG9yaWVudGF0aW9uOiAlcyknICUgKG9yaWVudGF0aW9uKVxuICAgICAgcHVzaChjb25kaXRpb25zLCBjb25kaXRpb24pXG4gICAgY29uZGl0aW9uID0gam9pbignLCAnLCBjb25kaXRpb25zKVxuICAgIEBtZWRpYSBjb25kaXRpb25cbiAgICAgIHtibG9ja31cbiAgICBpZiBmYWxsYmFjay1jbGFzc1xuICAgICAgK2NyZWF0ZS1mYWxsYmFjay1jbGFzcyhzZWxlY3RlZCwgZmFsbGJhY2stY2xhc3MpXG4gICAgICAgIHtibG9ja31cblxucGl4ZWwtcmF0aW8gPSBkZW5zaXR5XG5cbnJldGluYShvcmllbnRhdGlvbiA9IG51bGwsIGZhbGxiYWNrLWNsYXNzID0gbnVsbClcbiAgK2RlbnNpdHkoJ3JldGluYScsIG9yaWVudGF0aW9uLCBmYWxsYmFjay1jbGFzcylcbiAgICB7YmxvY2t9XG5cbmxhbmRzY2FwZShkZW5zaXR5ID0gbnVsbCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBzZWxlY3RlZCA9IHNlbGVjdG9yKClcbiAgaWYgbm90IChydXB0dXJlLnJhc3RlcmlzZS1tZWRpYS1xdWVyaWVzKVxuICAgIGlmIC1pcy1zdHJpbmcoZGVuc2l0eSlcbiAgICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICAgaWYgZGVuc2l0eVxuICAgICAgK3BpeGVsLXJhdGlvKGRlbnNpdHksIG9yaWVudGF0aW9uOiBsYW5kc2NhcGUsIGZhbGxiYWNrLWNsYXNzKVxuICAgICAgICB7YmxvY2t9XG4gICAgZWxzZVxuICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcbiAgICAgICAge2Jsb2NrfVxuICAgICAgaWYgZmFsbGJhY2stY2xhc3NcbiAgICAgICAgK2NyZWF0ZS1mYWxsYmFjay1jbGFzcyhzZWxlY3RlZCwgZmFsbGJhY2stY2xhc3MpXG4gICAgICAgICAge2Jsb2NrfVxuXG5wb3J0cmFpdChkZW5zaXR5ID0gbnVsbCwgZmFsbGJhY2stY2xhc3MgPSBudWxsKVxuICBzZWxlY3RlZCA9IHNlbGVjdG9yKClcbiAgaWYgbm90IChydXB0dXJlLnJhc3RlcmlzZS1tZWRpYS1xdWVyaWVzKVxuICAgIGlmIC1pcy1zdHJpbmcoZGVuc2l0eSlcbiAgICAgIGRlbnNpdHkgPSBjb252ZXJ0KGRlbnNpdHkpXG4gICAgaWYgZGVuc2l0eVxuICAgICAgK3BpeGVsLXJhdGlvKGRlbnNpdHksIG9yaWVudGF0aW9uOiBwb3J0cmFpdCwgZmFsbGJhY2stY2xhc3MpXG4gICAgICAgIHtibG9ja31cbiAgICBlbHNlXG4gICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChvcmllbnRhdGlvbjogcG9ydHJhaXQpXG4gICAgICAgIHtibG9ja31cbiAgICAgIGlmIGZhbGxiYWNrLWNsYXNzXG4gICAgICAgICtjcmVhdGUtZmFsbGJhY2stY2xhc3Moc2VsZWN0ZWQsIGZhbGxiYWNrLWNsYXNzKVxuICAgICAgICAgIHtibG9ja31cbiIsIi50YWJcblx0bWluLXdpZHRoIDk2MHB4XG5cdGhlaWdodCAxMDB2aFxuXHQmOm50aC1jaGlsZCgyKVxuXHRcdGJhY2tncm91bmQgIzAwMDAwMFxuXG4iXX0= */